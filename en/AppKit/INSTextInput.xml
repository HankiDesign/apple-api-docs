<Type Name="INSTextInput" FullName="AppKit.INSTextInput">
  <TypeSignature Language="C#" Value="public interface INSTextInput : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INSTextInput implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:AppKit.INSTextInput" />
  <TypeSignature Language="F#" Value="type INSTextInput = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.Mac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="NSTextInput", WrapperType=typeof(AppKit.NSTextInputWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="InsertText", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(Foundation.NSObject) }, Selector="insertText:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetMarkedText", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(Foundation.NSObject), typeof(Foundation.NSRange) }, Selector="setMarkedText:selectedRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="UnmarkText", Selector="unmarkText")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetAttributedSubstring", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(Foundation.NSRange) }, ReturnType=typeof(Foundation.NSAttributedString), Selector="attributedSubstringFromRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetFirstRectForCharacterRange", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(Foundation.NSRange) }, ReturnType=typeof(CoreGraphics.CGRect), Selector="firstRectForCharacterRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetCharacterIndex", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(CoreGraphics.CGPoint) }, ReturnType=typeof(System.nuint), Selector="characterIndexForPoint:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="hasMarkedText", IsProperty=true, IsRequired=true, IsStatic=false, Name="HasMarkedText", PropertyType=typeof(System.Boolean), Selector="hasMarkedText")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="conversationIdentifier", IsProperty=true, IsRequired=true, IsStatic=false, Name="ConversationIdentifier", PropertyType=typeof(System.nint), Selector="conversationIdentifier")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="markedRange", IsProperty=true, IsRequired=true, IsStatic=false, Name="MarkedRange", PropertyType=typeof(Foundation.NSRange), Selector="markedRange")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="selectedRange", IsProperty=true, IsRequired=true, IsStatic=false, Name="SelectedRange", PropertyType=typeof(Foundation.NSRange), Selector="selectedRange")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="validAttributesForMarkedText", IsProperty=true, IsRequired=true, IsStatic=false, Name="ValidAttributesForMarkedText", PropertyType=typeof(Foundation.NSString[]), Selector="validAttributesForMarkedText")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ConversationIdentifier">
      <MemberSignature Language="C#" Value="public nint ConversationIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint ConversationIdentifier" />
      <MemberSignature Language="DocId" Value="P:AppKit.INSTextInput.ConversationIdentifier" />
      <MemberSignature Language="F#" Value="member this.ConversationIdentifier : nint" Usage="AppKit.INSTextInput.ConversationIdentifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("conversationIdentifier")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttributedSubstring">
      <MemberSignature Language="C#" Value="public Foundation.NSAttributedString GetAttributedSubstring (Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSAttributedString GetAttributedSubstring(valuetype Foundation.NSRange range) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.INSTextInput.GetAttributedSubstring(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member GetAttributedSubstring : Foundation.NSRange -&gt; Foundation.NSAttributedString" Usage="iNSTextInput.GetAttributedSubstring range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("attributedSubstringFromRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSAttributedString</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharacterIndex">
      <MemberSignature Language="C#" Value="public nuint GetCharacterIndex (CoreGraphics.CGPoint point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nuint GetCharacterIndex(valuetype CoreGraphics.CGPoint point) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.INSTextInput.GetCharacterIndex(CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member GetCharacterIndex : CoreGraphics.CGPoint -&gt; nuint" Usage="iNSTextInput.GetCharacterIndex point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("characterIndexForPoint:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFirstRectForCharacterRange">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect GetFirstRectForCharacterRange (Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect GetFirstRectForCharacterRange(valuetype Foundation.NSRange range) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.INSTextInput.GetFirstRectForCharacterRange(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member GetFirstRectForCharacterRange : Foundation.NSRange -&gt; CoreGraphics.CGRect" Usage="iNSTextInput.GetFirstRectForCharacterRange range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("firstRectForCharacterRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasMarkedText">
      <MemberSignature Language="C#" Value="public bool HasMarkedText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasMarkedText" />
      <MemberSignature Language="DocId" Value="P:AppKit.INSTextInput.HasMarkedText" />
      <MemberSignature Language="F#" Value="member this.HasMarkedText : bool" Usage="AppKit.INSTextInput.HasMarkedText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("hasMarkedText")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertText">
      <MemberSignature Language="C#" Value="public void InsertText (Foundation.NSObject insertString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertText(class Foundation.NSObject insertString) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.INSTextInput.InsertText(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member InsertText : Foundation.NSObject -&gt; unit" Usage="iNSTextInput.InsertText insertString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("insertText:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 6, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="insertString" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="insertString">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkedRange">
      <MemberSignature Language="C#" Value="public Foundation.NSRange MarkedRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Foundation.NSRange MarkedRange" />
      <MemberSignature Language="DocId" Value="P:AppKit.INSTextInput.MarkedRange" />
      <MemberSignature Language="F#" Value="member this.MarkedRange : Foundation.NSRange" Usage="AppKit.INSTextInput.MarkedRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("markedRange")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedRange">
      <MemberSignature Language="C#" Value="public Foundation.NSRange SelectedRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Foundation.NSRange SelectedRange" />
      <MemberSignature Language="DocId" Value="P:AppKit.INSTextInput.SelectedRange" />
      <MemberSignature Language="F#" Value="member this.SelectedRange : Foundation.NSRange" Usage="AppKit.INSTextInput.SelectedRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("selectedRange")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMarkedText">
      <MemberSignature Language="C#" Value="public void SetMarkedText (Foundation.NSObject string, Foundation.NSRange selRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMarkedText(class Foundation.NSObject string, valuetype Foundation.NSRange selRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.INSTextInput.SetMarkedText(Foundation.NSObject,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetMarkedText : Foundation.NSObject * Foundation.NSRange -&gt; unit" Usage="iNSTextInput.SetMarkedText (string, selRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setMarkedText:selectedRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string" Type="Foundation.NSObject" />
        <Parameter Name="selRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="string">To be added.</param>
        <param name="selRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnmarkText">
      <MemberSignature Language="C#" Value="public void UnmarkText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnmarkText() cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.INSTextInput.UnmarkText" />
      <MemberSignature Language="F#" Value="abstract member UnmarkText : unit -&gt; unit" Usage="iNSTextInput.UnmarkText " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("unmarkText")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidAttributesForMarkedText">
      <MemberSignature Language="C#" Value="public Foundation.NSString[] ValidAttributesForMarkedText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSString[] ValidAttributesForMarkedText" />
      <MemberSignature Language="DocId" Value="P:AppKit.INSTextInput.ValidAttributesForMarkedText" />
      <MemberSignature Language="F#" Value="member this.ValidAttributesForMarkedText : Foundation.NSString[]" Usage="AppKit.INSTextInput.ValidAttributesForMarkedText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("validAttributesForMarkedText")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
