<Type Name="NSLayoutManager" FullName="AppKit.NSLayoutManager">
  <TypeSignature Language="C#" Value="public class NSLayoutManager : Foundation.NSObject, Foundation.INSCoding, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSLayoutManager extends Foundation.NSObject implements class Foundation.INSCoding, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:AppKit.NSLayoutManager" />
  <TypeSignature Language="F#" Value="type NSLayoutManager = class&#xA;    inherit NSObject&#xA;    interface INSCoding&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.Mac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("NSLayoutManager", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSLayoutManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSLayoutManager (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new AppKit.NSLayoutManager : Foundation.NSCoder -&gt; AppKit.NSLayoutManager" Usage="new AppKit.NSLayoutManager coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSLayoutManager (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new AppKit.NSLayoutManager : Foundation.NSObjectFlag -&gt; AppKit.NSLayoutManager" Usage="new AppKit.NSLayoutManager t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NSLayoutManager (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new AppKit.NSLayoutManager : nativeint -&gt; AppKit.NSLayoutManager" Usage="new AppKit.NSLayoutManager handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTemporaryAttribute">
      <MemberSignature Language="C#" Value="public void AddTemporaryAttribute (Foundation.NSString attributeName, Foundation.NSObject value, Foundation.NSRange characterRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddTemporaryAttribute(class Foundation.NSString attributeName, class Foundation.NSObject value, valuetype Foundation.NSRange characterRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.AddTemporaryAttribute(Foundation.NSString,Foundation.NSObject,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="member this.AddTemporaryAttribute : Foundation.NSString * Foundation.NSObject * Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.AddTemporaryAttribute (attributeName, value, characterRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="Foundation.NSString" />
        <Parameter Name="value" Type="Foundation.NSObject" />
        <Parameter Name="characterRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="attributeName">To be added.</param>
        <param name="value">To be added.</param>
        <param name="characterRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTemporaryAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddTemporaryAttribute (string attrName, Foundation.NSObject value, Foundation.NSRange charRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTemporaryAttribute(string attrName, class Foundation.NSObject value, valuetype Foundation.NSRange charRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.AddTemporaryAttribute(System.String,Foundation.NSObject,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member AddTemporaryAttribute : string * Foundation.NSObject * Foundation.NSRange -&gt; unit&#xA;override this.AddTemporaryAttribute : string * Foundation.NSObject * Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.AddTemporaryAttribute (attrName, value, charRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addTemporaryAttribute:value:forCharacterRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrName" Type="System.String" />
        <Parameter Name="value" Type="Foundation.NSObject" />
        <Parameter Name="charRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="attrName">To be added.</param>
        <param name="value">To be added.</param>
        <param name="charRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTemporaryAttributes">
      <MemberSignature Language="C#" Value="public virtual void AddTemporaryAttributes (Foundation.NSDictionary attrs, Foundation.NSRange charRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTemporaryAttributes(class Foundation.NSDictionary attrs, valuetype Foundation.NSRange charRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.AddTemporaryAttributes(Foundation.NSDictionary,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member AddTemporaryAttributes : Foundation.NSDictionary * Foundation.NSRange -&gt; unit&#xA;override this.AddTemporaryAttributes : Foundation.NSDictionary * Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.AddTemporaryAttributes (attrs, charRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addTemporaryAttributes:forCharacterRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrs" Type="Foundation.NSDictionary" />
        <Parameter Name="charRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="attrs">To be added.</param>
        <param name="charRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTextContainer">
      <MemberSignature Language="C#" Value="public virtual void AddTextContainer (AppKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTextContainer(class AppKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.AddTextContainer(AppKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member AddTextContainer : AppKit.NSTextContainer -&gt; unit&#xA;override this.AddTextContainer : AppKit.NSTextContainer -&gt; unit" Usage="nSLayoutManager.AddTextContainer container" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addTextContainer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="AppKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowsNonContiguousLayout">
      <MemberSignature Language="C#" Value="public virtual bool AllowsNonContiguousLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsNonContiguousLayout" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.AllowsNonContiguousLayout" />
      <MemberSignature Language="F#" Value="member this.AllowsNonContiguousLayout : bool with get, set" Usage="AppKit.NSLayoutManager.AllowsNonContiguousLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("allowsNonContiguousLayout")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAllowsNonContiguousLayout:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachmentSizeForGlyphAt">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGSize AttachmentSizeForGlyphAt (nint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGSize AttachmentSizeForGlyphAt(valuetype System.nint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.AttachmentSizeForGlyphAt(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member AttachmentSizeForGlyphAt : nint -&gt; CoreGraphics.CGSize&#xA;override this.AttachmentSizeForGlyphAt : nint -&gt; CoreGraphics.CGSize" Usage="nSLayoutManager.AttachmentSizeForGlyphAt glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("attachmentSizeForGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributedString">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSAttributedString AttributedString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSAttributedString AttributedString" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.AttributedString" />
      <MemberSignature Language="F#" Value="member this.AttributedString : Foundation.NSAttributedString" Usage="AppKit.NSLayoutManager.AttributedString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("attributedString")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, "Use 'TextStorage' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, "Use 'TextStorage' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSAttributedString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundLayoutEnabled">
      <MemberSignature Language="C#" Value="public virtual bool BackgroundLayoutEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BackgroundLayoutEnabled" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.BackgroundLayoutEnabled" />
      <MemberSignature Language="F#" Value="member this.BackgroundLayoutEnabled : bool with get, set" Usage="AppKit.NSLayoutManager.BackgroundLayoutEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("backgroundLayoutEnabled")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setBackgroundLayoutEnabled:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundingRectForGlyphRange">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect BoundingRectForGlyphRange (Foundation.NSRange glyphRange, AppKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect BoundingRectForGlyphRange(valuetype Foundation.NSRange glyphRange, class AppKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.BoundingRectForGlyphRange(Foundation.NSRange,AppKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member BoundingRectForGlyphRange : Foundation.NSRange * AppKit.NSTextContainer -&gt; CoreGraphics.CGRect&#xA;override this.BoundingRectForGlyphRange : Foundation.NSRange * AppKit.NSTextContainer -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.BoundingRectForGlyphRange (glyphRange, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("boundingRectForGlyphRange:inTextContainer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="container" Type="AppKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundsRect">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect BoundsRect (AppKit.NSTextBlock block, Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect BoundsRect(class AppKit.NSTextBlock block, valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.BoundsRect(AppKit.NSTextBlock,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member BoundsRect : AppKit.NSTextBlock * Foundation.NSRange -&gt; CoreGraphics.CGRect&#xA;override this.BoundsRect : AppKit.NSTextBlock * Foundation.NSRange -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.BoundsRect (block, glyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("boundsRectForTextBlock:glyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="block" Type="AppKit.NSTextBlock" />
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="block">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterIndexForGlyphAtIndex">
      <MemberSignature Language="C#" Value="public virtual nuint CharacterIndexForGlyphAtIndex (nint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nuint CharacterIndexForGlyphAtIndex(valuetype System.nint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.CharacterIndexForGlyphAtIndex(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member CharacterIndexForGlyphAtIndex : nint -&gt; nuint&#xA;override this.CharacterIndexForGlyphAtIndex : nint -&gt; nuint" Usage="nSLayoutManager.CharacterIndexForGlyphAtIndex glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("characterIndexForGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterIndexForPoint">
      <MemberSignature Language="C#" Value="public virtual nuint CharacterIndexForPoint (CoreGraphics.CGPoint point, AppKit.NSTextContainer container, ref nfloat fractionOfDistanceBetweenInsertionPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nuint CharacterIndexForPoint(valuetype CoreGraphics.CGPoint point, class AppKit.NSTextContainer container, valuetype System.nfloat&amp; fractionOfDistanceBetweenInsertionPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.CharacterIndexForPoint(CoreGraphics.CGPoint,AppKit.NSTextContainer,System.nfloat@)" />
      <MemberSignature Language="F#" Value="abstract member CharacterIndexForPoint : CoreGraphics.CGPoint * AppKit.NSTextContainer *  -&gt; nuint&#xA;override this.CharacterIndexForPoint : CoreGraphics.CGPoint * AppKit.NSTextContainer *  -&gt; nuint" Usage="nSLayoutManager.CharacterIndexForPoint (point, container, fractionOfDistanceBetweenInsertionPoints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("characterIndexForPoint:inTextContainer:fractionOfDistanceBetweenInsertionPoints:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use 'GetCharacterIndex' instead.", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="container" Type="AppKit.NSTextContainer" />
        <Parameter Name="fractionOfDistanceBetweenInsertionPoints" Type="System.nfloat" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="container">To be added.</param>
        <param name="fractionOfDistanceBetweenInsertionPoints">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterRangeForGlyphRange">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange CharacterRangeForGlyphRange (Foundation.NSRange glyphRange, out Foundation.NSRange actualGlyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSRange CharacterRangeForGlyphRange(valuetype Foundation.NSRange glyphRange, [out] valuetype Foundation.NSRange&amp; actualGlyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.CharacterRangeForGlyphRange(Foundation.NSRange,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="abstract member CharacterRangeForGlyphRange : Foundation.NSRange *  -&gt; Foundation.NSRange&#xA;override this.CharacterRangeForGlyphRange : Foundation.NSRange *  -&gt; Foundation.NSRange" Usage="nSLayoutManager.CharacterRangeForGlyphRange (glyphRange, actualGlyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("characterRangeForGlyphRange:actualGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use 'GetCharacterRange' instead.", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="actualGlyphRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <param name="actualGlyphRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="AppKit.NSLayoutManager.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultAttachmentScaling">
      <MemberSignature Language="C#" Value="public virtual AppKit.NSImageScaling DefaultAttachmentScaling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype AppKit.NSImageScaling DefaultAttachmentScaling" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.DefaultAttachmentScaling" />
      <MemberSignature Language="F#" Value="member this.DefaultAttachmentScaling : AppKit.NSImageScaling with get, set" Usage="AppKit.NSLayoutManager.DefaultAttachmentScaling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("defaultAttachmentScaling")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDefaultAttachmentScaling:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSImageScaling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultBaselineOffsetForFont">
      <MemberSignature Language="C#" Value="public virtual nfloat DefaultBaselineOffsetForFont (AppKit.NSFont theFont);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat DefaultBaselineOffsetForFont(class AppKit.NSFont theFont) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.DefaultBaselineOffsetForFont(AppKit.NSFont)" />
      <MemberSignature Language="F#" Value="abstract member DefaultBaselineOffsetForFont : AppKit.NSFont -&gt; nfloat&#xA;override this.DefaultBaselineOffsetForFont : AppKit.NSFont -&gt; nfloat" Usage="nSLayoutManager.DefaultBaselineOffsetForFont theFont" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("defaultBaselineOffsetForFont:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="theFont" Type="AppKit.NSFont" />
      </Parameters>
      <Docs>
        <param name="theFont">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultLineHeightForFont">
      <MemberSignature Language="C#" Value="public virtual nfloat DefaultLineHeightForFont (AppKit.NSFont theFont);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat DefaultLineHeightForFont(class AppKit.NSFont theFont) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.DefaultLineHeightForFont(AppKit.NSFont)" />
      <MemberSignature Language="F#" Value="abstract member DefaultLineHeightForFont : AppKit.NSFont -&gt; nfloat&#xA;override this.DefaultLineHeightForFont : AppKit.NSFont -&gt; nfloat" Usage="nSLayoutManager.DefaultLineHeightForFont theFont" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("defaultLineHeightForFont:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="theFont" Type="AppKit.NSFont" />
      </Parameters>
      <Docs>
        <param name="theFont">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public AppKit.INSLayoutManagerDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AppKit.INSLayoutManagerDelegate Delegate" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.Delegate" />
      <MemberSignature Language="F#" Value="member this.Delegate : AppKit.INSLayoutManagerDelegate with get, set" Usage="AppKit.NSLayoutManager.Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.INSLayoutManagerDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteGlyphs">
      <MemberSignature Language="C#" Value="public virtual void DeleteGlyphs (Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteGlyphs(valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.DeleteGlyphs(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member DeleteGlyphs : Foundation.NSRange -&gt; unit&#xA;override this.DeleteGlyphs : Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.DeleteGlyphs glyphRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("deleteGlyphsInRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, "Use 'SetGlyphs' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="nSLayoutManager.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawBackgroundForGlyphRange">
      <MemberSignature Language="C#" Value="public virtual void DrawBackgroundForGlyphRange (Foundation.NSRange glyphsToShow, CoreGraphics.CGPoint origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawBackgroundForGlyphRange(valuetype Foundation.NSRange glyphsToShow, valuetype CoreGraphics.CGPoint origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.DrawBackgroundForGlyphRange(Foundation.NSRange,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member DrawBackgroundForGlyphRange : Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit&#xA;override this.DrawBackgroundForGlyphRange : Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit" Usage="nSLayoutManager.DrawBackgroundForGlyphRange (glyphsToShow, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("drawBackgroundForGlyphRange:atPoint:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphsToShow" Type="Foundation.NSRange" />
        <Parameter Name="origin" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="glyphsToShow">To be added.</param>
        <param name="origin">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawGlyphsForGlyphRange">
      <MemberSignature Language="C#" Value="public virtual void DrawGlyphsForGlyphRange (Foundation.NSRange glyphsToShow, CoreGraphics.CGPoint origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawGlyphsForGlyphRange(valuetype Foundation.NSRange glyphsToShow, valuetype CoreGraphics.CGPoint origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.DrawGlyphsForGlyphRange(Foundation.NSRange,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member DrawGlyphsForGlyphRange : Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit&#xA;override this.DrawGlyphsForGlyphRange : Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit" Usage="nSLayoutManager.DrawGlyphsForGlyphRange (glyphsToShow, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("drawGlyphsForGlyphRange:atPoint:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphsToShow" Type="Foundation.NSRange" />
        <Parameter Name="origin" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="glyphsToShow">To be added.</param>
        <param name="origin">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawsOutsideLineFragmentForGlyphAt">
      <MemberSignature Language="C#" Value="public virtual bool DrawsOutsideLineFragmentForGlyphAt (nint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DrawsOutsideLineFragmentForGlyphAt(valuetype System.nint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.DrawsOutsideLineFragmentForGlyphAt(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member DrawsOutsideLineFragmentForGlyphAt : nint -&gt; bool&#xA;override this.DrawsOutsideLineFragmentForGlyphAt : nint -&gt; bool" Usage="nSLayoutManager.DrawsOutsideLineFragmentForGlyphAt glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("drawsOutsideLineFragmentForGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawStrikethrough">
      <MemberSignature Language="C#" Value="public virtual void DrawStrikethrough (Foundation.NSRange glyphRange, AppKit.NSUnderlineStyle strikethroughVal, nfloat baselineOffset, CoreGraphics.CGRect lineRect, Foundation.NSRange lineGlyphRange, CoreGraphics.CGPoint containerOrigin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawStrikethrough(valuetype Foundation.NSRange glyphRange, valuetype AppKit.NSUnderlineStyle strikethroughVal, valuetype System.nfloat baselineOffset, valuetype CoreGraphics.CGRect lineRect, valuetype Foundation.NSRange lineGlyphRange, valuetype CoreGraphics.CGPoint containerOrigin) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.DrawStrikethrough(Foundation.NSRange,AppKit.NSUnderlineStyle,System.nfloat,CoreGraphics.CGRect,Foundation.NSRange,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member DrawStrikethrough : Foundation.NSRange * AppKit.NSUnderlineStyle * nfloat * CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit&#xA;override this.DrawStrikethrough : Foundation.NSRange * AppKit.NSUnderlineStyle * nfloat * CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit" Usage="nSLayoutManager.DrawStrikethrough (glyphRange, strikethroughVal, baselineOffset, lineRect, lineGlyphRange, containerOrigin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="strikethroughVal" Type="AppKit.NSUnderlineStyle" />
        <Parameter Name="baselineOffset" Type="System.nfloat" />
        <Parameter Name="lineRect" Type="CoreGraphics.CGRect" />
        <Parameter Name="lineGlyphRange" Type="Foundation.NSRange" />
        <Parameter Name="containerOrigin" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <param name="strikethroughVal">To be added.</param>
        <param name="baselineOffset">To be added.</param>
        <param name="lineRect">To be added.</param>
        <param name="lineGlyphRange">To be added.</param>
        <param name="containerOrigin">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawUnderline">
      <MemberSignature Language="C#" Value="public virtual void DrawUnderline (Foundation.NSRange glyphRange, AppKit.NSUnderlineStyle underlineVal, nfloat baselineOffset, CoreGraphics.CGRect lineRect, Foundation.NSRange lineGlyphRange, CoreGraphics.CGPoint containerOrigin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawUnderline(valuetype Foundation.NSRange glyphRange, valuetype AppKit.NSUnderlineStyle underlineVal, valuetype System.nfloat baselineOffset, valuetype CoreGraphics.CGRect lineRect, valuetype Foundation.NSRange lineGlyphRange, valuetype CoreGraphics.CGPoint containerOrigin) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.DrawUnderline(Foundation.NSRange,AppKit.NSUnderlineStyle,System.nfloat,CoreGraphics.CGRect,Foundation.NSRange,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member DrawUnderline : Foundation.NSRange * AppKit.NSUnderlineStyle * nfloat * CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit&#xA;override this.DrawUnderline : Foundation.NSRange * AppKit.NSUnderlineStyle * nfloat * CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit" Usage="nSLayoutManager.DrawUnderline (glyphRange, underlineVal, baselineOffset, lineRect, lineGlyphRange, containerOrigin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="underlineVal" Type="AppKit.NSUnderlineStyle" />
        <Parameter Name="baselineOffset" Type="System.nfloat" />
        <Parameter Name="lineRect" Type="CoreGraphics.CGRect" />
        <Parameter Name="lineGlyphRange" Type="Foundation.NSRange" />
        <Parameter Name="containerOrigin" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <param name="underlineVal">To be added.</param>
        <param name="baselineOffset">To be added.</param>
        <param name="lineRect">To be added.</param>
        <param name="lineGlyphRange">To be added.</param>
        <param name="containerOrigin">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.EncodeTo(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="abstract member EncodeTo : Foundation.NSCoder -&gt; unit&#xA;override this.EncodeTo : Foundation.NSCoder -&gt; unit" Usage="nSLayoutManager.EncodeTo encoder" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCoding.EncodeTo(Foundation.NSCoder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureGlyphsForCharacterRange">
      <MemberSignature Language="C#" Value="public virtual void EnsureGlyphsForCharacterRange (Foundation.NSRange charRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnsureGlyphsForCharacterRange(valuetype Foundation.NSRange charRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.EnsureGlyphsForCharacterRange(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member EnsureGlyphsForCharacterRange : Foundation.NSRange -&gt; unit&#xA;override this.EnsureGlyphsForCharacterRange : Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.EnsureGlyphsForCharacterRange charRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("ensureGlyphsForCharacterRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="charRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureGlyphsForGlyphRange">
      <MemberSignature Language="C#" Value="public virtual void EnsureGlyphsForGlyphRange (Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnsureGlyphsForGlyphRange(valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.EnsureGlyphsForGlyphRange(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member EnsureGlyphsForGlyphRange : Foundation.NSRange -&gt; unit&#xA;override this.EnsureGlyphsForGlyphRange : Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.EnsureGlyphsForGlyphRange glyphRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("ensureGlyphsForGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureLayoutForBoundingRect">
      <MemberSignature Language="C#" Value="public virtual void EnsureLayoutForBoundingRect (CoreGraphics.CGRect bounds, AppKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnsureLayoutForBoundingRect(valuetype CoreGraphics.CGRect bounds, class AppKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.EnsureLayoutForBoundingRect(CoreGraphics.CGRect,AppKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member EnsureLayoutForBoundingRect : CoreGraphics.CGRect * AppKit.NSTextContainer -&gt; unit&#xA;override this.EnsureLayoutForBoundingRect : CoreGraphics.CGRect * AppKit.NSTextContainer -&gt; unit" Usage="nSLayoutManager.EnsureLayoutForBoundingRect (bounds, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("ensureLayoutForBoundingRect:inTextContainer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="CoreGraphics.CGRect" />
        <Parameter Name="container" Type="AppKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="bounds">To be added.</param>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureLayoutForCharacterRange">
      <MemberSignature Language="C#" Value="public virtual void EnsureLayoutForCharacterRange (Foundation.NSRange charRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnsureLayoutForCharacterRange(valuetype Foundation.NSRange charRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.EnsureLayoutForCharacterRange(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member EnsureLayoutForCharacterRange : Foundation.NSRange -&gt; unit&#xA;override this.EnsureLayoutForCharacterRange : Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.EnsureLayoutForCharacterRange charRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("ensureLayoutForCharacterRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="charRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureLayoutForGlyphRange">
      <MemberSignature Language="C#" Value="public virtual void EnsureLayoutForGlyphRange (Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnsureLayoutForGlyphRange(valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.EnsureLayoutForGlyphRange(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member EnsureLayoutForGlyphRange : Foundation.NSRange -&gt; unit&#xA;override this.EnsureLayoutForGlyphRange : Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.EnsureLayoutForGlyphRange glyphRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("ensureLayoutForGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureLayoutForTextContainer">
      <MemberSignature Language="C#" Value="public virtual void EnsureLayoutForTextContainer (AppKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnsureLayoutForTextContainer(class AppKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.EnsureLayoutForTextContainer(AppKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member EnsureLayoutForTextContainer : AppKit.NSTextContainer -&gt; unit&#xA;override this.EnsureLayoutForTextContainer : AppKit.NSTextContainer -&gt; unit" Usage="nSLayoutManager.EnsureLayoutForTextContainer container" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("ensureLayoutForTextContainer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="AppKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateEnclosingRects">
      <MemberSignature Language="C#" Value="public virtual void EnumerateEnclosingRects (Foundation.NSRange glyphRange, Foundation.NSRange selectedRange, AppKit.NSTextContainer textContainer, AppKit.NSTextLayoutEnumerateEnclosingRects callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnumerateEnclosingRects(valuetype Foundation.NSRange glyphRange, valuetype Foundation.NSRange selectedRange, class AppKit.NSTextContainer textContainer, class AppKit.NSTextLayoutEnumerateEnclosingRects callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.EnumerateEnclosingRects(Foundation.NSRange,Foundation.NSRange,AppKit.NSTextContainer,AppKit.NSTextLayoutEnumerateEnclosingRects)" />
      <MemberSignature Language="F#" Value="abstract member EnumerateEnclosingRects : Foundation.NSRange * Foundation.NSRange * AppKit.NSTextContainer * AppKit.NSTextLayoutEnumerateEnclosingRects -&gt; unit&#xA;override this.EnumerateEnclosingRects : Foundation.NSRange * Foundation.NSRange * AppKit.NSTextContainer * AppKit.NSTextLayoutEnumerateEnclosingRects -&gt; unit" Usage="nSLayoutManager.EnumerateEnclosingRects (glyphRange, selectedRange, textContainer, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("enumerateEnclosingRectsForGlyphRange:withinSelectedGlyphRange:inTextContainer:usingBlock:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="selectedRange" Type="Foundation.NSRange" />
        <Parameter Name="textContainer" Type="AppKit.NSTextContainer" />
        <Parameter Name="callback" Type="AppKit.NSTextLayoutEnumerateEnclosingRects">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDNSTextLayoutEnumerateEnclosingRects))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <param name="selectedRange">To be added.</param>
        <param name="textContainer">To be added.</param>
        <param name="callback">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateLineFragments">
      <MemberSignature Language="C#" Value="public virtual void EnumerateLineFragments (Foundation.NSRange glyphRange, AppKit.NSTextLayoutEnumerateLineFragments callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnumerateLineFragments(valuetype Foundation.NSRange glyphRange, class AppKit.NSTextLayoutEnumerateLineFragments callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.EnumerateLineFragments(Foundation.NSRange,AppKit.NSTextLayoutEnumerateLineFragments)" />
      <MemberSignature Language="F#" Value="abstract member EnumerateLineFragments : Foundation.NSRange * AppKit.NSTextLayoutEnumerateLineFragments -&gt; unit&#xA;override this.EnumerateLineFragments : Foundation.NSRange * AppKit.NSTextLayoutEnumerateLineFragments -&gt; unit" Usage="nSLayoutManager.EnumerateLineFragments (glyphRange, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("enumerateLineFragmentsForGlyphRange:usingBlock:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="callback" Type="AppKit.NSTextLayoutEnumerateLineFragments">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDNSTextLayoutEnumerateLineFragments))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <param name="callback">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraLineFragmentRect">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect ExtraLineFragmentRect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGRect ExtraLineFragmentRect" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.ExtraLineFragmentRect" />
      <MemberSignature Language="F#" Value="member this.ExtraLineFragmentRect : CoreGraphics.CGRect" Usage="AppKit.NSLayoutManager.ExtraLineFragmentRect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("extraLineFragmentRect")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraLineFragmentTextContainer">
      <MemberSignature Language="C#" Value="public virtual AppKit.NSTextContainer ExtraLineFragmentTextContainer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AppKit.NSTextContainer ExtraLineFragmentTextContainer" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.ExtraLineFragmentTextContainer" />
      <MemberSignature Language="F#" Value="member this.ExtraLineFragmentTextContainer : AppKit.NSTextContainer" Usage="AppKit.NSLayoutManager.ExtraLineFragmentTextContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("extraLineFragmentTextContainer")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSTextContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraLineFragmentUsedRect">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect ExtraLineFragmentUsedRect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGRect ExtraLineFragmentUsedRect" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.ExtraLineFragmentUsedRect" />
      <MemberSignature Language="F#" Value="member this.ExtraLineFragmentUsedRect : CoreGraphics.CGRect" Usage="AppKit.NSLayoutManager.ExtraLineFragmentUsedRect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("extraLineFragmentUsedRect")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FillBackground">
      <MemberSignature Language="C#" Value="protected virtual void FillBackground (IntPtr rectArray, nuint rectCount, Foundation.NSRange characterRange, AppKit.NSColor color);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FillBackground(native int rectArray, valuetype System.nuint rectCount, valuetype Foundation.NSRange characterRange, class AppKit.NSColor color) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.FillBackground(System.IntPtr,System.nuint,Foundation.NSRange,AppKit.NSColor)" />
      <MemberSignature Language="F#" Value="abstract member FillBackground : nativeint * nuint * Foundation.NSRange * AppKit.NSColor -&gt; unit&#xA;override this.FillBackground : nativeint * nuint * Foundation.NSRange * AppKit.NSColor -&gt; unit" Usage="nSLayoutManager.FillBackground (rectArray, rectCount, characterRange, color)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("This method should never be called, only overridden.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Export("fillBackgroundRectArray:count:forCharacterRange:color:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rectArray" Type="System.IntPtr" />
        <Parameter Name="rectCount" Type="System.nuint" />
        <Parameter Name="characterRange" Type="Foundation.NSRange" />
        <Parameter Name="color" Type="AppKit.NSColor" />
      </Parameters>
      <Docs>
        <param name="rectArray">To be added.</param>
        <param name="rectCount">To be added.</param>
        <param name="characterRange">To be added.</param>
        <param name="color">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstUnlaidCharacterIndex">
      <MemberSignature Language="C#" Value="public virtual nint FirstUnlaidCharacterIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint FirstUnlaidCharacterIndex" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.FirstUnlaidCharacterIndex" />
      <MemberSignature Language="F#" Value="member this.FirstUnlaidCharacterIndex : nint" Usage="AppKit.NSLayoutManager.FirstUnlaidCharacterIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("firstUnlaidCharacterIndex")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstUnlaidGlyphIndex">
      <MemberSignature Language="C#" Value="public virtual nint FirstUnlaidGlyphIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint FirstUnlaidGlyphIndex" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.FirstUnlaidGlyphIndex" />
      <MemberSignature Language="F#" Value="member this.FirstUnlaidGlyphIndex : nint" Usage="AppKit.NSLayoutManager.FirstUnlaidGlyphIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("firstUnlaidGlyphIndex")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FractionOfDistanceThroughGlyphForPoint">
      <MemberSignature Language="C#" Value="public virtual nfloat FractionOfDistanceThroughGlyphForPoint (CoreGraphics.CGPoint point, AppKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat FractionOfDistanceThroughGlyphForPoint(valuetype CoreGraphics.CGPoint point, class AppKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.FractionOfDistanceThroughGlyphForPoint(CoreGraphics.CGPoint,AppKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member FractionOfDistanceThroughGlyphForPoint : CoreGraphics.CGPoint * AppKit.NSTextContainer -&gt; nfloat&#xA;override this.FractionOfDistanceThroughGlyphForPoint : CoreGraphics.CGPoint * AppKit.NSTextContainer -&gt; nfloat" Usage="nSLayoutManager.FractionOfDistanceThroughGlyphForPoint (point, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fractionOfDistanceThroughGlyphForPoint:inTextContainer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="container" Type="AppKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBoundsRect">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect GetBoundsRect (AppKit.NSTextBlock block, nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect GetBoundsRect(class AppKit.NSTextBlock block, valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetBoundsRect(AppKit.NSTextBlock,System.nuint)" />
      <MemberSignature Language="F#" Value="member this.GetBoundsRect : AppKit.NSTextBlock * nuint -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetBoundsRect (block, glyphIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="block" Type="AppKit.NSTextBlock" />
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="block">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBoundsRect">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect GetBoundsRect (AppKit.NSTextBlock block, nuint glyphIndex, out Foundation.NSRange effectiveGlyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect GetBoundsRect(class AppKit.NSTextBlock block, valuetype System.nuint glyphIndex, [out] valuetype Foundation.NSRange&amp; effectiveGlyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetBoundsRect(AppKit.NSTextBlock,System.nuint,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="member this.GetBoundsRect : AppKit.NSTextBlock * nuint *  -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetBoundsRect (block, glyphIndex, effectiveGlyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="block" Type="AppKit.NSTextBlock" />
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="block">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <param name="effectiveGlyphRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBoundsRect">
      <MemberSignature Language="C#" Value="protected virtual CoreGraphics.CGRect GetBoundsRect (AppKit.NSTextBlock block, nuint glyphIndex, IntPtr effectiveGlyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype CoreGraphics.CGRect GetBoundsRect(class AppKit.NSTextBlock block, valuetype System.nuint glyphIndex, native int effectiveGlyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetBoundsRect(AppKit.NSTextBlock,System.nuint,System.IntPtr)" />
      <MemberSignature Language="F#" Value="abstract member GetBoundsRect : AppKit.NSTextBlock * nuint * nativeint -&gt; CoreGraphics.CGRect&#xA;override this.GetBoundsRect : AppKit.NSTextBlock * nuint * nativeint -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetBoundsRect (block, glyphIndex, effectiveGlyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("boundsRectForTextBlock:atIndex:effectiveRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="block" Type="AppKit.NSTextBlock" />
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="block">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <param name="effectiveGlyphRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCGGlyph">
      <MemberSignature Language="C#" Value="public virtual ushort GetCGGlyph (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int16 GetCGGlyph(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetCGGlyph(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member GetCGGlyph : nuint -&gt; uint16&#xA;override this.GetCGGlyph : nuint -&gt; uint16" Usage="nSLayoutManager.GetCGGlyph glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("CGGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCGGlyph">
      <MemberSignature Language="C#" Value="public virtual ushort GetCGGlyph (nuint glyphIndex, out bool isValidIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int16 GetCGGlyph(valuetype System.nuint glyphIndex, [out] bool&amp; isValidIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetCGGlyph(System.nuint,System.Boolean@)" />
      <MemberSignature Language="F#" Value="abstract member GetCGGlyph : nuint *  -&gt; uint16&#xA;override this.GetCGGlyph : nuint *  -&gt; uint16" Usage="nSLayoutManager.GetCGGlyph (glyphIndex, isValidIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("CGGlyphAtIndex:isValidIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="isValidIndex" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="isValidIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharacterIndex">
      <MemberSignature Language="C#" Value="public nuint GetCharacterIndex (CoreGraphics.CGPoint point, AppKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.nuint GetCharacterIndex(valuetype CoreGraphics.CGPoint point, class AppKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetCharacterIndex(CoreGraphics.CGPoint,AppKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="member this.GetCharacterIndex : CoreGraphics.CGPoint * AppKit.NSTextContainer -&gt; nuint" Usage="nSLayoutManager.GetCharacterIndex (point, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="container" Type="AppKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharacterIndex">
      <MemberSignature Language="C#" Value="public nuint GetCharacterIndex (CoreGraphics.CGPoint point, AppKit.NSTextContainer container, out nfloat fractionOfDistanceBetweenInsertionPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.nuint GetCharacterIndex(valuetype CoreGraphics.CGPoint point, class AppKit.NSTextContainer container, [out] valuetype System.nfloat&amp; fractionOfDistanceBetweenInsertionPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetCharacterIndex(CoreGraphics.CGPoint,AppKit.NSTextContainer,System.nfloat@)" />
      <MemberSignature Language="F#" Value="member this.GetCharacterIndex : CoreGraphics.CGPoint * AppKit.NSTextContainer *  -&gt; nuint" Usage="nSLayoutManager.GetCharacterIndex (point, container, fractionOfDistanceBetweenInsertionPoints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="container" Type="AppKit.NSTextContainer" />
        <Parameter Name="fractionOfDistanceBetweenInsertionPoints" Type="System.nfloat" RefType="out" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="container">To be added.</param>
        <param name="fractionOfDistanceBetweenInsertionPoints">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharacterRange">
      <MemberSignature Language="C#" Value="public Foundation.NSRange GetCharacterRange (Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Foundation.NSRange GetCharacterRange(valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetCharacterRange(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="member this.GetCharacterRange : Foundation.NSRange -&gt; Foundation.NSRange" Usage="nSLayoutManager.GetCharacterRange glyphRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharacterRange">
      <MemberSignature Language="C#" Value="public Foundation.NSRange GetCharacterRange (Foundation.NSRange glyphRange, out Foundation.NSRange actualGlyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Foundation.NSRange GetCharacterRange(valuetype Foundation.NSRange glyphRange, [out] valuetype Foundation.NSRange&amp; actualGlyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetCharacterRange(Foundation.NSRange,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="member this.GetCharacterRange : Foundation.NSRange *  -&gt; Foundation.NSRange" Usage="nSLayoutManager.GetCharacterRange (glyphRange, actualGlyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="actualGlyphRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <param name="actualGlyphRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFirstUnlaidCharacterIndex">
      <MemberSignature Language="C#" Value="public virtual void GetFirstUnlaidCharacterIndex (ref nuint charIndex, ref nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetFirstUnlaidCharacterIndex(valuetype System.nuint&amp; charIndex, valuetype System.nuint&amp; glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetFirstUnlaidCharacterIndex(System.nuint@,System.nuint@)" />
      <MemberSignature Language="F#" Value="abstract member GetFirstUnlaidCharacterIndex :  *  -&gt; unit&#xA;override this.GetFirstUnlaidCharacterIndex :  *  -&gt; unit" Usage="nSLayoutManager.GetFirstUnlaidCharacterIndex (charIndex, glyphIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("getFirstUnlaidCharacterIndex:glyphIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charIndex" Type="System.nuint" RefType="ref" />
        <Parameter Name="glyphIndex" Type="System.nuint" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="charIndex">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGlyphRange">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange GetGlyphRange (AppKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSRange GetGlyphRange(class AppKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetGlyphRange(AppKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member GetGlyphRange : AppKit.NSTextContainer -&gt; Foundation.NSRange&#xA;override this.GetGlyphRange : AppKit.NSTextContainer -&gt; Foundation.NSRange" Usage="nSLayoutManager.GetGlyphRange container" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("glyphRangeForTextContainer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="AppKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGlyphRange">
      <MemberSignature Language="C#" Value="public Foundation.NSRange GetGlyphRange (Foundation.NSRange characterRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Foundation.NSRange GetGlyphRange(valuetype Foundation.NSRange characterRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetGlyphRange(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="member this.GetGlyphRange : Foundation.NSRange -&gt; Foundation.NSRange" Usage="nSLayoutManager.GetGlyphRange characterRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="characterRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGlyphRange">
      <MemberSignature Language="C#" Value="public Foundation.NSRange GetGlyphRange (Foundation.NSRange characterRange, out Foundation.NSRange actualCharacterRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Foundation.NSRange GetGlyphRange(valuetype Foundation.NSRange characterRange, [out] valuetype Foundation.NSRange&amp; actualCharacterRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetGlyphRange(Foundation.NSRange,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="member this.GetGlyphRange : Foundation.NSRange *  -&gt; Foundation.NSRange" Usage="nSLayoutManager.GetGlyphRange (characterRange, actualCharacterRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterRange" Type="Foundation.NSRange" />
        <Parameter Name="actualCharacterRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="characterRange">To be added.</param>
        <param name="actualCharacterRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGlyphs">
      <MemberSignature Language="C#" Value="public nuint GetGlyphs (Foundation.NSRange glyphRange, short[] glyphBuffer, AppKit.NSGlyphProperty[] props, nuint[] charIndexBuffer, byte[] bidiLevelBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.nuint GetGlyphs(valuetype Foundation.NSRange glyphRange, int16[] glyphBuffer, valuetype AppKit.NSGlyphProperty[] props, valuetype System.nuint[] charIndexBuffer, unsigned int8[] bidiLevelBuffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetGlyphs(Foundation.NSRange,System.Int16[],AppKit.NSGlyphProperty[],System.nuint[],System.Byte[])" />
      <MemberSignature Language="F#" Value="member this.GetGlyphs : Foundation.NSRange * int16[] * AppKit.NSGlyphProperty[] * nuint[] * byte[] -&gt; nuint" Usage="nSLayoutManager.GetGlyphs (glyphRange, glyphBuffer, props, charIndexBuffer, bidiLevelBuffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="glyphBuffer" Type="System.Int16[]" />
        <Parameter Name="props" Type="AppKit.NSGlyphProperty[]" />
        <Parameter Name="charIndexBuffer" Type="System.nuint[]" />
        <Parameter Name="bidiLevelBuffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <param name="glyphBuffer">To be added.</param>
        <param name="props">To be added.</param>
        <param name="charIndexBuffer">To be added.</param>
        <param name="bidiLevelBuffer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGlyphs">
      <MemberSignature Language="C#" Value="protected virtual nuint GetGlyphs (Foundation.NSRange glyphRange, IntPtr glyphBuffer, IntPtr properties, IntPtr characterIndexBuffer, IntPtr bidiLevelBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.nuint GetGlyphs(valuetype Foundation.NSRange glyphRange, native int glyphBuffer, native int properties, native int characterIndexBuffer, native int bidiLevelBuffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetGlyphs(Foundation.NSRange,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="F#" Value="abstract member GetGlyphs : Foundation.NSRange * nativeint * nativeint * nativeint * nativeint -&gt; nuint&#xA;override this.GetGlyphs : Foundation.NSRange * nativeint * nativeint * nativeint * nativeint -&gt; nuint" Usage="nSLayoutManager.GetGlyphs (glyphRange, glyphBuffer, properties, characterIndexBuffer, bidiLevelBuffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("getGlyphsInRange:glyphs:properties:characterIndexes:bidiLevels:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="glyphBuffer" Type="System.IntPtr" />
        <Parameter Name="properties" Type="System.IntPtr" />
        <Parameter Name="characterIndexBuffer" Type="System.IntPtr" />
        <Parameter Name="bidiLevelBuffer" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <param name="glyphBuffer">To be added.</param>
        <param name="properties">To be added.</param>
        <param name="characterIndexBuffer">To be added.</param>
        <param name="bidiLevelBuffer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIntAttribute">
      <MemberSignature Language="C#" Value="public virtual nint GetIntAttribute (nint attributeTag, nint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint GetIntAttribute(valuetype System.nint attributeTag, valuetype System.nint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetIntAttribute(System.nint,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member GetIntAttribute : nint * nint -&gt; nint&#xA;override this.GetIntAttribute : nint * nint -&gt; nint" Usage="nSLayoutManager.GetIntAttribute (attributeTag, glyphIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("intAttribute:forGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, "Use 'GetGlyphs' instead).")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeTag" Type="System.nint" />
        <Parameter Name="glyphIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="attributeTag">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLayoutRect">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect GetLayoutRect (AppKit.NSTextBlock block, nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect GetLayoutRect(class AppKit.NSTextBlock block, valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetLayoutRect(AppKit.NSTextBlock,System.nuint)" />
      <MemberSignature Language="F#" Value="member this.GetLayoutRect : AppKit.NSTextBlock * nuint -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetLayoutRect (block, glyphIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="block" Type="AppKit.NSTextBlock" />
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="block">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLayoutRect">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect GetLayoutRect (AppKit.NSTextBlock block, nuint glyphIndex, out Foundation.NSRange effectiveGlyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect GetLayoutRect(class AppKit.NSTextBlock block, valuetype System.nuint glyphIndex, [out] valuetype Foundation.NSRange&amp; effectiveGlyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetLayoutRect(AppKit.NSTextBlock,System.nuint,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="member this.GetLayoutRect : AppKit.NSTextBlock * nuint *  -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetLayoutRect (block, glyphIndex, effectiveGlyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="block" Type="AppKit.NSTextBlock" />
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="block">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <param name="effectiveGlyphRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLayoutRect">
      <MemberSignature Language="C#" Value="protected virtual CoreGraphics.CGRect GetLayoutRect (AppKit.NSTextBlock block, nuint glyphIndex, IntPtr effectiveGlyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype CoreGraphics.CGRect GetLayoutRect(class AppKit.NSTextBlock block, valuetype System.nuint glyphIndex, native int effectiveGlyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetLayoutRect(AppKit.NSTextBlock,System.nuint,System.IntPtr)" />
      <MemberSignature Language="F#" Value="abstract member GetLayoutRect : AppKit.NSTextBlock * nuint * nativeint -&gt; CoreGraphics.CGRect&#xA;override this.GetLayoutRect : AppKit.NSTextBlock * nuint * nativeint -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetLayoutRect (block, glyphIndex, effectiveGlyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("layoutRectForTextBlock:atIndex:effectiveRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="block" Type="AppKit.NSTextBlock" />
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="block">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <param name="effectiveGlyphRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineFragmentInsertionPoints">
      <MemberSignature Language="C#" Value="public virtual nuint GetLineFragmentInsertionPoints (nuint charIndex, bool aFlag, bool dFlag, IntPtr positions, IntPtr charIndexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nuint GetLineFragmentInsertionPoints(valuetype System.nuint charIndex, bool aFlag, bool dFlag, native int positions, native int charIndexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetLineFragmentInsertionPoints(System.nuint,System.Boolean,System.Boolean,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="F#" Value="abstract member GetLineFragmentInsertionPoints : nuint * bool * bool * nativeint * nativeint -&gt; nuint&#xA;override this.GetLineFragmentInsertionPoints : nuint * bool * bool * nativeint * nativeint -&gt; nuint" Usage="nSLayoutManager.GetLineFragmentInsertionPoints (charIndex, aFlag, dFlag, positions, charIndexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("getLineFragmentInsertionPointsForCharacterAtIndex:alternatePositions:inDisplayOrder:positions:characterIndexes:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charIndex" Type="System.nuint" />
        <Parameter Name="aFlag" Type="System.Boolean" />
        <Parameter Name="dFlag" Type="System.Boolean" />
        <Parameter Name="positions" Type="System.IntPtr" />
        <Parameter Name="charIndexes" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="charIndex">To be added.</param>
        <param name="aFlag">To be added.</param>
        <param name="dFlag">To be added.</param>
        <param name="positions">To be added.</param>
        <param name="charIndexes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineFragmentInsertionPoints">
      <MemberSignature Language="C#" Value="public nuint GetLineFragmentInsertionPoints (nuint charIndex, bool alternatePosition, bool inDisplayOrder, nfloat[] positions, nint[] charIndexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.nuint GetLineFragmentInsertionPoints(valuetype System.nuint charIndex, bool alternatePosition, bool inDisplayOrder, valuetype System.nfloat[] positions, valuetype System.nint[] charIndexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetLineFragmentInsertionPoints(System.nuint,System.Boolean,System.Boolean,System.nfloat[],System.nint[])" />
      <MemberSignature Language="F#" Value="member this.GetLineFragmentInsertionPoints : nuint * bool * bool * nfloat[] * nint[] -&gt; nuint" Usage="nSLayoutManager.GetLineFragmentInsertionPoints (charIndex, alternatePosition, inDisplayOrder, positions, charIndexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charIndex" Type="System.nuint" />
        <Parameter Name="alternatePosition" Type="System.Boolean" />
        <Parameter Name="inDisplayOrder" Type="System.Boolean" />
        <Parameter Name="positions" Type="System.nfloat[]" />
        <Parameter Name="charIndexes" Type="System.nint[]" />
      </Parameters>
      <Docs>
        <param name="charIndex">To be added.</param>
        <param name="alternatePosition">To be added.</param>
        <param name="inDisplayOrder">To be added.</param>
        <param name="positions">To be added.</param>
        <param name="charIndexes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineFragmentRect">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect GetLineFragmentRect (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect GetLineFragmentRect(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetLineFragmentRect(System.nuint)" />
      <MemberSignature Language="F#" Value="member this.GetLineFragmentRect : nuint -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetLineFragmentRect glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineFragmentRect">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect GetLineFragmentRect (nuint glyphIndex, out Foundation.NSRange effectiveGlyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect GetLineFragmentRect(valuetype System.nuint glyphIndex, [out] valuetype Foundation.NSRange&amp; effectiveGlyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetLineFragmentRect(System.nuint,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="member this.GetLineFragmentRect : nuint *  -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetLineFragmentRect (glyphIndex, effectiveGlyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="effectiveGlyphRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineFragmentRect">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect GetLineFragmentRect (nuint glyphIndex, bool withoutAdditionalLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect GetLineFragmentRect(valuetype System.nuint glyphIndex, bool withoutAdditionalLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetLineFragmentRect(System.nuint,System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.GetLineFragmentRect : nuint * bool -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetLineFragmentRect (glyphIndex, withoutAdditionalLayout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="withoutAdditionalLayout" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="withoutAdditionalLayout">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineFragmentRect">
      <MemberSignature Language="C#" Value="protected virtual CoreGraphics.CGRect GetLineFragmentRect (nuint glyphIndex, IntPtr effectiveGlyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype CoreGraphics.CGRect GetLineFragmentRect(valuetype System.nuint glyphIndex, native int effectiveGlyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetLineFragmentRect(System.nuint,System.IntPtr)" />
      <MemberSignature Language="F#" Value="abstract member GetLineFragmentRect : nuint * nativeint -&gt; CoreGraphics.CGRect&#xA;override this.GetLineFragmentRect : nuint * nativeint -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetLineFragmentRect (glyphIndex, effectiveGlyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("lineFragmentRectForGlyphAtIndex:effectiveRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="effectiveGlyphRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineFragmentRect">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect GetLineFragmentRect (nuint glyphIndex, out Foundation.NSRange effectiveGlyphRange, bool withoutAdditionalLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect GetLineFragmentRect(valuetype System.nuint glyphIndex, [out] valuetype Foundation.NSRange&amp; effectiveGlyphRange, bool withoutAdditionalLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetLineFragmentRect(System.nuint,Foundation.NSRange@,System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.GetLineFragmentRect : nuint *  * bool -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetLineFragmentRect (glyphIndex, effectiveGlyphRange, withoutAdditionalLayout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="Foundation.NSRange" RefType="out" />
        <Parameter Name="withoutAdditionalLayout" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="effectiveGlyphRange">To be added.</param>
        <param name="withoutAdditionalLayout">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineFragmentRect">
      <MemberSignature Language="C#" Value="protected virtual CoreGraphics.CGRect GetLineFragmentRect (nuint glyphIndex, IntPtr effectiveGlyphRange, bool withoutAdditionalLayout);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype CoreGraphics.CGRect GetLineFragmentRect(valuetype System.nuint glyphIndex, native int effectiveGlyphRange, bool withoutAdditionalLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetLineFragmentRect(System.nuint,System.IntPtr,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member GetLineFragmentRect : nuint * nativeint * bool -&gt; CoreGraphics.CGRect&#xA;override this.GetLineFragmentRect : nuint * nativeint * bool -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetLineFragmentRect (glyphIndex, effectiveGlyphRange, withoutAdditionalLayout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("lineFragmentRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="System.IntPtr" />
        <Parameter Name="withoutAdditionalLayout" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="effectiveGlyphRange">To be added.</param>
        <param name="withoutAdditionalLayout">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineFragmentUsedRect">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect GetLineFragmentUsedRect (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect GetLineFragmentUsedRect(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetLineFragmentUsedRect(System.nuint)" />
      <MemberSignature Language="F#" Value="member this.GetLineFragmentUsedRect : nuint -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetLineFragmentUsedRect glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineFragmentUsedRect">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect GetLineFragmentUsedRect (nuint glyphIndex, out Foundation.NSRange effectiveGlyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect GetLineFragmentUsedRect(valuetype System.nuint glyphIndex, [out] valuetype Foundation.NSRange&amp; effectiveGlyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetLineFragmentUsedRect(System.nuint,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="member this.GetLineFragmentUsedRect : nuint *  -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetLineFragmentUsedRect (glyphIndex, effectiveGlyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="effectiveGlyphRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineFragmentUsedRect">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect GetLineFragmentUsedRect (nuint glyphIndex, bool withoutAdditionalLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect GetLineFragmentUsedRect(valuetype System.nuint glyphIndex, bool withoutAdditionalLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetLineFragmentUsedRect(System.nuint,System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.GetLineFragmentUsedRect : nuint * bool -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetLineFragmentUsedRect (glyphIndex, withoutAdditionalLayout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="withoutAdditionalLayout" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="withoutAdditionalLayout">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineFragmentUsedRect">
      <MemberSignature Language="C#" Value="protected virtual CoreGraphics.CGRect GetLineFragmentUsedRect (nuint glyphIndex, IntPtr effectiveGlyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype CoreGraphics.CGRect GetLineFragmentUsedRect(valuetype System.nuint glyphIndex, native int effectiveGlyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetLineFragmentUsedRect(System.nuint,System.IntPtr)" />
      <MemberSignature Language="F#" Value="abstract member GetLineFragmentUsedRect : nuint * nativeint -&gt; CoreGraphics.CGRect&#xA;override this.GetLineFragmentUsedRect : nuint * nativeint -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetLineFragmentUsedRect (glyphIndex, effectiveGlyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("lineFragmentUsedRectForGlyphAtIndex:effectiveRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="effectiveGlyphRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineFragmentUsedRect">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect GetLineFragmentUsedRect (nuint glyphIndex, out Foundation.NSRange effectiveGlyphRange, bool withoutAdditionalLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect GetLineFragmentUsedRect(valuetype System.nuint glyphIndex, [out] valuetype Foundation.NSRange&amp; effectiveGlyphRange, bool withoutAdditionalLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetLineFragmentUsedRect(System.nuint,Foundation.NSRange@,System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.GetLineFragmentUsedRect : nuint *  * bool -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetLineFragmentUsedRect (glyphIndex, effectiveGlyphRange, withoutAdditionalLayout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="Foundation.NSRange" RefType="out" />
        <Parameter Name="withoutAdditionalLayout" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="effectiveGlyphRange">To be added.</param>
        <param name="withoutAdditionalLayout">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineFragmentUsedRect">
      <MemberSignature Language="C#" Value="protected virtual CoreGraphics.CGRect GetLineFragmentUsedRect (nuint glyphIndex, IntPtr effectiveGlyphRange, bool withoutAdditionalLayout);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype CoreGraphics.CGRect GetLineFragmentUsedRect(valuetype System.nuint glyphIndex, native int effectiveGlyphRange, bool withoutAdditionalLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetLineFragmentUsedRect(System.nuint,System.IntPtr,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member GetLineFragmentUsedRect : nuint * nativeint * bool -&gt; CoreGraphics.CGRect&#xA;override this.GetLineFragmentUsedRect : nuint * nativeint * bool -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetLineFragmentUsedRect (glyphIndex, effectiveGlyphRange, withoutAdditionalLayout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("lineFragmentUsedRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="System.IntPtr" />
        <Parameter Name="withoutAdditionalLayout" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="effectiveGlyphRange">To be added.</param>
        <param name="withoutAdditionalLayout">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public virtual AppKit.NSGlyphProperty GetProperty (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype AppKit.NSGlyphProperty GetProperty(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetProperty(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : nuint -&gt; AppKit.NSGlyphProperty&#xA;override this.GetProperty : nuint -&gt; AppKit.NSGlyphProperty" Usage="nSLayoutManager.GetProperty glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("propertyForGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSGlyphProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRectArray">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect[] GetRectArray (Foundation.NSRange glyphRange, Foundation.NSRange selectedGlyphRange, AppKit.NSTextContainer textContainer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect[] GetRectArray(valuetype Foundation.NSRange glyphRange, valuetype Foundation.NSRange selectedGlyphRange, class AppKit.NSTextContainer textContainer) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetRectArray(Foundation.NSRange,Foundation.NSRange,AppKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="member this.GetRectArray : Foundation.NSRange * Foundation.NSRange * AppKit.NSTextContainer -&gt; CoreGraphics.CGRect[]" Usage="nSLayoutManager.GetRectArray (glyphRange, selectedGlyphRange, textContainer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="selectedGlyphRange" Type="Foundation.NSRange" />
        <Parameter Name="textContainer" Type="AppKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <param name="selectedGlyphRange">To be added.</param>
        <param name="textContainer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTemporaryAttribute">
      <MemberSignature Language="C#" Value="public Foundation.NSObject GetTemporaryAttribute (Foundation.NSString attributeName, nuint characterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSObject GetTemporaryAttribute(class Foundation.NSString attributeName, valuetype System.nuint characterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetTemporaryAttribute(Foundation.NSString,System.nuint)" />
      <MemberSignature Language="F#" Value="member this.GetTemporaryAttribute : Foundation.NSString * nuint -&gt; Foundation.NSObject" Usage="nSLayoutManager.GetTemporaryAttribute (attributeName, characterIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="Foundation.NSString" />
        <Parameter Name="characterIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="attributeName">To be added.</param>
        <param name="characterIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTemporaryAttribute">
      <MemberSignature Language="C#" Value="public Foundation.NSObject GetTemporaryAttribute (Foundation.NSString attributeName, nuint characterIndex, Foundation.NSRange rangeLimit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSObject GetTemporaryAttribute(class Foundation.NSString attributeName, valuetype System.nuint characterIndex, valuetype Foundation.NSRange rangeLimit) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetTemporaryAttribute(Foundation.NSString,System.nuint,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="member this.GetTemporaryAttribute : Foundation.NSString * nuint * Foundation.NSRange -&gt; Foundation.NSObject" Usage="nSLayoutManager.GetTemporaryAttribute (attributeName, characterIndex, rangeLimit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="Foundation.NSString" />
        <Parameter Name="characterIndex" Type="System.nuint" />
        <Parameter Name="rangeLimit" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="attributeName">To be added.</param>
        <param name="characterIndex">To be added.</param>
        <param name="rangeLimit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTemporaryAttribute">
      <MemberSignature Language="C#" Value="public Foundation.NSObject GetTemporaryAttribute (Foundation.NSString attributeName, nuint characterIndex, out Foundation.NSRange effectiveRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSObject GetTemporaryAttribute(class Foundation.NSString attributeName, valuetype System.nuint characterIndex, [out] valuetype Foundation.NSRange&amp; effectiveRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetTemporaryAttribute(Foundation.NSString,System.nuint,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="member this.GetTemporaryAttribute : Foundation.NSString * nuint *  -&gt; Foundation.NSObject" Usage="nSLayoutManager.GetTemporaryAttribute (attributeName, characterIndex, effectiveRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="Foundation.NSString" />
        <Parameter Name="characterIndex" Type="System.nuint" />
        <Parameter Name="effectiveRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="attributeName">To be added.</param>
        <param name="characterIndex">To be added.</param>
        <param name="effectiveRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTemporaryAttribute">
      <MemberSignature Language="C#" Value="protected virtual Foundation.NSObject GetTemporaryAttribute (Foundation.NSString attributeName, nuint characterIndex, IntPtr effectiveRange);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Foundation.NSObject GetTemporaryAttribute(class Foundation.NSString attributeName, valuetype System.nuint characterIndex, native int effectiveRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetTemporaryAttribute(Foundation.NSString,System.nuint,System.IntPtr)" />
      <MemberSignature Language="F#" Value="abstract member GetTemporaryAttribute : Foundation.NSString * nuint * nativeint -&gt; Foundation.NSObject&#xA;override this.GetTemporaryAttribute : Foundation.NSString * nuint * nativeint -&gt; Foundation.NSObject" Usage="nSLayoutManager.GetTemporaryAttribute (attributeName, characterIndex, effectiveRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("temporaryAttribute:atCharacterIndex:effectiveRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="Foundation.NSString" />
        <Parameter Name="characterIndex" Type="System.nuint" />
        <Parameter Name="effectiveRange" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="attributeName">To be added.</param>
        <param name="characterIndex">To be added.</param>
        <param name="effectiveRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTemporaryAttribute">
      <MemberSignature Language="C#" Value="public Foundation.NSObject GetTemporaryAttribute (Foundation.NSString attributeName, nuint characterIndex, out Foundation.NSRange longestEffectiveRange, Foundation.NSRange rangeLimit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSObject GetTemporaryAttribute(class Foundation.NSString attributeName, valuetype System.nuint characterIndex, [out] valuetype Foundation.NSRange&amp; longestEffectiveRange, valuetype Foundation.NSRange rangeLimit) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetTemporaryAttribute(Foundation.NSString,System.nuint,Foundation.NSRange@,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="member this.GetTemporaryAttribute : Foundation.NSString * nuint *  * Foundation.NSRange -&gt; Foundation.NSObject" Usage="nSLayoutManager.GetTemporaryAttribute (attributeName, characterIndex, longestEffectiveRange, rangeLimit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="Foundation.NSString" />
        <Parameter Name="characterIndex" Type="System.nuint" />
        <Parameter Name="longestEffectiveRange" Type="Foundation.NSRange" RefType="out" />
        <Parameter Name="rangeLimit" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="attributeName">To be added.</param>
        <param name="characterIndex">To be added.</param>
        <param name="longestEffectiveRange">To be added.</param>
        <param name="rangeLimit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTemporaryAttribute">
      <MemberSignature Language="C#" Value="protected virtual Foundation.NSObject GetTemporaryAttribute (Foundation.NSString attributeName, nuint characterIndex, IntPtr longestEffectiveRange, Foundation.NSRange rangeLimit);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Foundation.NSObject GetTemporaryAttribute(class Foundation.NSString attributeName, valuetype System.nuint characterIndex, native int longestEffectiveRange, valuetype Foundation.NSRange rangeLimit) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetTemporaryAttribute(Foundation.NSString,System.nuint,System.IntPtr,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member GetTemporaryAttribute : Foundation.NSString * nuint * nativeint * Foundation.NSRange -&gt; Foundation.NSObject&#xA;override this.GetTemporaryAttribute : Foundation.NSString * nuint * nativeint * Foundation.NSRange -&gt; Foundation.NSObject" Usage="nSLayoutManager.GetTemporaryAttribute (attributeName, characterIndex, longestEffectiveRange, rangeLimit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("temporaryAttribute:atCharacterIndex:longestEffectiveRange:inRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="Foundation.NSString" />
        <Parameter Name="characterIndex" Type="System.nuint" />
        <Parameter Name="longestEffectiveRange" Type="System.IntPtr" />
        <Parameter Name="rangeLimit" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="attributeName">To be added.</param>
        <param name="characterIndex">To be added.</param>
        <param name="longestEffectiveRange">To be added.</param>
        <param name="rangeLimit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTemporaryAttributes">
      <MemberSignature Language="C#" Value="public Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt; GetTemporaryAttributes (nuint characterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSDictionary`2&lt;class Foundation.NSString, class Foundation.NSObject&gt; GetTemporaryAttributes(valuetype System.nuint characterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetTemporaryAttributes(System.nuint)" />
      <MemberSignature Language="F#" Value="member this.GetTemporaryAttributes : nuint -&gt; Foundation.NSDictionary&lt;Foundation.NSString, Foundation.NSObject&gt;" Usage="nSLayoutManager.GetTemporaryAttributes characterIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="characterIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTemporaryAttributes">
      <MemberSignature Language="C#" Value="public Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt; GetTemporaryAttributes (nuint characterIndex, out Foundation.NSRange effectiveCharacterRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSDictionary`2&lt;class Foundation.NSString, class Foundation.NSObject&gt; GetTemporaryAttributes(valuetype System.nuint characterIndex, [out] valuetype Foundation.NSRange&amp; effectiveCharacterRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetTemporaryAttributes(System.nuint,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="member this.GetTemporaryAttributes : nuint *  -&gt; Foundation.NSDictionary&lt;Foundation.NSString, Foundation.NSObject&gt;" Usage="nSLayoutManager.GetTemporaryAttributes (characterIndex, effectiveCharacterRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterIndex" Type="System.nuint" />
        <Parameter Name="effectiveCharacterRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="characterIndex">To be added.</param>
        <param name="effectiveCharacterRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTemporaryAttributes">
      <MemberSignature Language="C#" Value="public Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt; GetTemporaryAttributes (nuint characterIndex, Foundation.NSRange rangeLimit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSDictionary`2&lt;class Foundation.NSString, class Foundation.NSObject&gt; GetTemporaryAttributes(valuetype System.nuint characterIndex, valuetype Foundation.NSRange rangeLimit) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetTemporaryAttributes(System.nuint,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="member this.GetTemporaryAttributes : nuint * Foundation.NSRange -&gt; Foundation.NSDictionary&lt;Foundation.NSString, Foundation.NSObject&gt;" Usage="nSLayoutManager.GetTemporaryAttributes (characterIndex, rangeLimit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterIndex" Type="System.nuint" />
        <Parameter Name="rangeLimit" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="characterIndex">To be added.</param>
        <param name="rangeLimit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTemporaryAttributes">
      <MemberSignature Language="C#" Value="protected virtual Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt; GetTemporaryAttributes (nuint characterIndex, IntPtr effectiveCharacterRange);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Foundation.NSDictionary`2&lt;class Foundation.NSString, class Foundation.NSObject&gt; GetTemporaryAttributes(valuetype System.nuint characterIndex, native int effectiveCharacterRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetTemporaryAttributes(System.nuint,System.IntPtr)" />
      <MemberSignature Language="F#" Value="abstract member GetTemporaryAttributes : nuint * nativeint -&gt; Foundation.NSDictionary&lt;Foundation.NSString, Foundation.NSObject&gt;&#xA;override this.GetTemporaryAttributes : nuint * nativeint -&gt; Foundation.NSDictionary&lt;Foundation.NSString, Foundation.NSObject&gt;" Usage="nSLayoutManager.GetTemporaryAttributes (characterIndex, effectiveCharacterRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("temporaryAttributesAtCharacterIndex:effectiveRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterIndex" Type="System.nuint" />
        <Parameter Name="effectiveCharacterRange" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="characterIndex">To be added.</param>
        <param name="effectiveCharacterRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTemporaryAttributes">
      <MemberSignature Language="C#" Value="public Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt; GetTemporaryAttributes (nuint characterIndex, out Foundation.NSRange longestEffectiveRange, Foundation.NSRange rangeLimit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSDictionary`2&lt;class Foundation.NSString, class Foundation.NSObject&gt; GetTemporaryAttributes(valuetype System.nuint characterIndex, [out] valuetype Foundation.NSRange&amp; longestEffectiveRange, valuetype Foundation.NSRange rangeLimit) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetTemporaryAttributes(System.nuint,Foundation.NSRange@,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="member this.GetTemporaryAttributes : nuint *  * Foundation.NSRange -&gt; Foundation.NSDictionary&lt;Foundation.NSString, Foundation.NSObject&gt;" Usage="nSLayoutManager.GetTemporaryAttributes (characterIndex, longestEffectiveRange, rangeLimit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterIndex" Type="System.nuint" />
        <Parameter Name="longestEffectiveRange" Type="Foundation.NSRange" RefType="out" />
        <Parameter Name="rangeLimit" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="characterIndex">To be added.</param>
        <param name="longestEffectiveRange">To be added.</param>
        <param name="rangeLimit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTemporaryAttributes">
      <MemberSignature Language="C#" Value="protected virtual Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt; GetTemporaryAttributes (nuint characterIndex, IntPtr longestEffectiveRange, Foundation.NSRange rangeLimit);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Foundation.NSDictionary`2&lt;class Foundation.NSString, class Foundation.NSObject&gt; GetTemporaryAttributes(valuetype System.nuint characterIndex, native int longestEffectiveRange, valuetype Foundation.NSRange rangeLimit) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetTemporaryAttributes(System.nuint,System.IntPtr,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member GetTemporaryAttributes : nuint * nativeint * Foundation.NSRange -&gt; Foundation.NSDictionary&lt;Foundation.NSString, Foundation.NSObject&gt;&#xA;override this.GetTemporaryAttributes : nuint * nativeint * Foundation.NSRange -&gt; Foundation.NSDictionary&lt;Foundation.NSString, Foundation.NSObject&gt;" Usage="nSLayoutManager.GetTemporaryAttributes (characterIndex, longestEffectiveRange, rangeLimit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("temporaryAttributesAtCharacterIndex:longestEffectiveRange:inRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterIndex" Type="System.nuint" />
        <Parameter Name="longestEffectiveRange" Type="System.IntPtr" />
        <Parameter Name="rangeLimit" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="characterIndex">To be added.</param>
        <param name="longestEffectiveRange">To be added.</param>
        <param name="rangeLimit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextContainer">
      <MemberSignature Language="C#" Value="public AppKit.NSTextContainer GetTextContainer (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class AppKit.NSTextContainer GetTextContainer(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetTextContainer(System.nuint)" />
      <MemberSignature Language="F#" Value="member this.GetTextContainer : nuint -&gt; AppKit.NSTextContainer" Usage="nSLayoutManager.GetTextContainer glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSTextContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextContainer">
      <MemberSignature Language="C#" Value="public AppKit.NSTextContainer GetTextContainer (nuint glyphIndex, out Foundation.NSRange effectiveGlyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class AppKit.NSTextContainer GetTextContainer(valuetype System.nuint glyphIndex, [out] valuetype Foundation.NSRange&amp; effectiveGlyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetTextContainer(System.nuint,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="member this.GetTextContainer : nuint *  -&gt; AppKit.NSTextContainer" Usage="nSLayoutManager.GetTextContainer (glyphIndex, effectiveGlyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSTextContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="effectiveGlyphRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextContainer">
      <MemberSignature Language="C#" Value="public AppKit.NSTextContainer GetTextContainer (nuint glyphIndex, bool flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class AppKit.NSTextContainer GetTextContainer(valuetype System.nuint glyphIndex, bool flag) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetTextContainer(System.nuint,System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.GetTextContainer : nuint * bool -&gt; AppKit.NSTextContainer" Usage="nSLayoutManager.GetTextContainer (glyphIndex, flag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSTextContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="flag" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="flag">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextContainer">
      <MemberSignature Language="C#" Value="protected virtual AppKit.NSTextContainer GetTextContainer (nuint glyphIndex, IntPtr effectiveGlyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class AppKit.NSTextContainer GetTextContainer(valuetype System.nuint glyphIndex, native int effectiveGlyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetTextContainer(System.nuint,System.IntPtr)" />
      <MemberSignature Language="F#" Value="abstract member GetTextContainer : nuint * nativeint -&gt; AppKit.NSTextContainer&#xA;override this.GetTextContainer : nuint * nativeint -&gt; AppKit.NSTextContainer" Usage="nSLayoutManager.GetTextContainer (glyphIndex, effectiveGlyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("textContainerForGlyphAtIndex:effectiveRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSTextContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="effectiveGlyphRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextContainer">
      <MemberSignature Language="C#" Value="public AppKit.NSTextContainer GetTextContainer (nuint glyphIndex, out Foundation.NSRange effectiveGlyphRange, bool withoutAdditionalLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class AppKit.NSTextContainer GetTextContainer(valuetype System.nuint glyphIndex, [out] valuetype Foundation.NSRange&amp; effectiveGlyphRange, bool withoutAdditionalLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetTextContainer(System.nuint,Foundation.NSRange@,System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.GetTextContainer : nuint *  * bool -&gt; AppKit.NSTextContainer" Usage="nSLayoutManager.GetTextContainer (glyphIndex, effectiveGlyphRange, withoutAdditionalLayout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSTextContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="Foundation.NSRange" RefType="out" />
        <Parameter Name="withoutAdditionalLayout" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="effectiveGlyphRange">To be added.</param>
        <param name="withoutAdditionalLayout">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextContainer">
      <MemberSignature Language="C#" Value="protected virtual AppKit.NSTextContainer GetTextContainer (nuint glyphIndex, IntPtr effectiveGlyphRange, bool withoutAdditionalLayout);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class AppKit.NSTextContainer GetTextContainer(valuetype System.nuint glyphIndex, native int effectiveGlyphRange, bool withoutAdditionalLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetTextContainer(System.nuint,System.IntPtr,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member GetTextContainer : nuint * nativeint * bool -&gt; AppKit.NSTextContainer&#xA;override this.GetTextContainer : nuint * nativeint * bool -&gt; AppKit.NSTextContainer" Usage="nSLayoutManager.GetTextContainer (glyphIndex, effectiveGlyphRange, withoutAdditionalLayout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("textContainerForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSTextContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="System.IntPtr" />
        <Parameter Name="withoutAdditionalLayout" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="effectiveGlyphRange">To be added.</param>
        <param name="withoutAdditionalLayout">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTruncatedGlyphRangeInLineFragment">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange GetTruncatedGlyphRangeInLineFragment (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSRange GetTruncatedGlyphRangeInLineFragment(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetTruncatedGlyphRangeInLineFragment(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member GetTruncatedGlyphRangeInLineFragment : nuint -&gt; Foundation.NSRange&#xA;override this.GetTruncatedGlyphRangeInLineFragment : nuint -&gt; Foundation.NSRange" Usage="nSLayoutManager.GetTruncatedGlyphRangeInLineFragment glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("truncatedGlyphRangeInLineFragmentForGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUsedRectForTextContainer">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect GetUsedRectForTextContainer (AppKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect GetUsedRectForTextContainer(class AppKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GetUsedRectForTextContainer(AppKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member GetUsedRectForTextContainer : AppKit.NSTextContainer -&gt; CoreGraphics.CGRect&#xA;override this.GetUsedRectForTextContainer : AppKit.NSTextContainer -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetUsedRectForTextContainer container" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("usedRectForTextContainer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="AppKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphAtIndex">
      <MemberSignature Language="C#" Value="public virtual uint GlyphAtIndex (nint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int32 GlyphAtIndex(valuetype System.nint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GlyphAtIndex(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member GlyphAtIndex : nint -&gt; uint32&#xA;override this.GlyphAtIndex : nint -&gt; uint32" Usage="nSLayoutManager.GlyphAtIndex glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("glyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, "Use 'GetCGGlyph' instead).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphAtIndex">
      <MemberSignature Language="C#" Value="public virtual uint GlyphAtIndex (nint glyphIndex, ref bool isValidIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int32 GlyphAtIndex(valuetype System.nint glyphIndex, bool&amp; isValidIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GlyphAtIndex(System.nint,System.Boolean@)" />
      <MemberSignature Language="F#" Value="abstract member GlyphAtIndex : nint *  -&gt; uint32&#xA;override this.GlyphAtIndex : nint *  -&gt; uint32" Usage="nSLayoutManager.GlyphAtIndex (glyphIndex, isValidIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("glyphAtIndex:isValidIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, "Use 'GetCGGlyph' instead).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nint" />
        <Parameter Name="isValidIndex" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="isValidIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphGenerator">
      <MemberSignature Language="C#" Value="public virtual AppKit.NSGlyphGenerator GlyphGenerator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AppKit.NSGlyphGenerator GlyphGenerator" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.GlyphGenerator" />
      <MemberSignature Language="F#" Value="member this.GlyphGenerator : AppKit.NSGlyphGenerator with get, set" Usage="AppKit.NSLayoutManager.GlyphGenerator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("glyphGenerator", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setGlyphGenerator:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSGlyphGenerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphIndexForCharacterAtIndex">
      <MemberSignature Language="C#" Value="public virtual nuint GlyphIndexForCharacterAtIndex (nint charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nuint GlyphIndexForCharacterAtIndex(valuetype System.nint charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GlyphIndexForCharacterAtIndex(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member GlyphIndexForCharacterAtIndex : nint -&gt; nuint&#xA;override this.GlyphIndexForCharacterAtIndex : nint -&gt; nuint" Usage="nSLayoutManager.GlyphIndexForCharacterAtIndex charIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("glyphIndexForCharacterAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="charIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphIndexForPoint">
      <MemberSignature Language="C#" Value="public virtual nuint GlyphIndexForPoint (CoreGraphics.CGPoint point, AppKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nuint GlyphIndexForPoint(valuetype CoreGraphics.CGPoint point, class AppKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GlyphIndexForPoint(CoreGraphics.CGPoint,AppKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member GlyphIndexForPoint : CoreGraphics.CGPoint * AppKit.NSTextContainer -&gt; nuint&#xA;override this.GlyphIndexForPoint : CoreGraphics.CGPoint * AppKit.NSTextContainer -&gt; nuint" Usage="nSLayoutManager.GlyphIndexForPoint (point, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("glyphIndexForPoint:inTextContainer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="container" Type="AppKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphIndexForPointInTextContainer">
      <MemberSignature Language="C#" Value="public virtual nuint GlyphIndexForPointInTextContainer (CoreGraphics.CGPoint point, AppKit.NSTextContainer container, ref nfloat fractionOfDistanceThroughGlyph);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nuint GlyphIndexForPointInTextContainer(valuetype CoreGraphics.CGPoint point, class AppKit.NSTextContainer container, valuetype System.nfloat&amp; fractionOfDistanceThroughGlyph) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GlyphIndexForPointInTextContainer(CoreGraphics.CGPoint,AppKit.NSTextContainer,System.nfloat@)" />
      <MemberSignature Language="F#" Value="abstract member GlyphIndexForPointInTextContainer : CoreGraphics.CGPoint * AppKit.NSTextContainer *  -&gt; nuint&#xA;override this.GlyphIndexForPointInTextContainer : CoreGraphics.CGPoint * AppKit.NSTextContainer *  -&gt; nuint" Usage="nSLayoutManager.GlyphIndexForPointInTextContainer (point, container, fractionOfDistanceThroughGlyph)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="container" Type="AppKit.NSTextContainer" />
        <Parameter Name="fractionOfDistanceThroughGlyph" Type="System.nfloat" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="container">To be added.</param>
        <param name="fractionOfDistanceThroughGlyph">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphRangeForBoundingRect">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange GlyphRangeForBoundingRect (CoreGraphics.CGRect bounds, AppKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSRange GlyphRangeForBoundingRect(valuetype CoreGraphics.CGRect bounds, class AppKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GlyphRangeForBoundingRect(CoreGraphics.CGRect,AppKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member GlyphRangeForBoundingRect : CoreGraphics.CGRect * AppKit.NSTextContainer -&gt; Foundation.NSRange&#xA;override this.GlyphRangeForBoundingRect : CoreGraphics.CGRect * AppKit.NSTextContainer -&gt; Foundation.NSRange" Usage="nSLayoutManager.GlyphRangeForBoundingRect (bounds, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("glyphRangeForBoundingRect:inTextContainer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="CoreGraphics.CGRect" />
        <Parameter Name="container" Type="AppKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="bounds">To be added.</param>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphRangeForBoundingRectWithoutAdditionalLayout">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange GlyphRangeForBoundingRectWithoutAdditionalLayout (CoreGraphics.CGRect bounds, AppKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSRange GlyphRangeForBoundingRectWithoutAdditionalLayout(valuetype CoreGraphics.CGRect bounds, class AppKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GlyphRangeForBoundingRectWithoutAdditionalLayout(CoreGraphics.CGRect,AppKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member GlyphRangeForBoundingRectWithoutAdditionalLayout : CoreGraphics.CGRect * AppKit.NSTextContainer -&gt; Foundation.NSRange&#xA;override this.GlyphRangeForBoundingRectWithoutAdditionalLayout : CoreGraphics.CGRect * AppKit.NSTextContainer -&gt; Foundation.NSRange" Usage="nSLayoutManager.GlyphRangeForBoundingRectWithoutAdditionalLayout (bounds, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="CoreGraphics.CGRect" />
        <Parameter Name="container" Type="AppKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="bounds">To be added.</param>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphRangeForCharacterRange">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange GlyphRangeForCharacterRange (Foundation.NSRange charRange, out Foundation.NSRange actualCharRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSRange GlyphRangeForCharacterRange(valuetype Foundation.NSRange charRange, [out] valuetype Foundation.NSRange&amp; actualCharRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.GlyphRangeForCharacterRange(Foundation.NSRange,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="abstract member GlyphRangeForCharacterRange : Foundation.NSRange *  -&gt; Foundation.NSRange&#xA;override this.GlyphRangeForCharacterRange : Foundation.NSRange *  -&gt; Foundation.NSRange" Usage="nSLayoutManager.GlyphRangeForCharacterRange (charRange, actualCharRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("glyphRangeForCharacterRange:actualCharacterRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use 'GetGlyphRange' instead.", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charRange" Type="Foundation.NSRange" />
        <Parameter Name="actualCharRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="charRange">To be added.</param>
        <param name="actualCharRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNonContiguousLayout">
      <MemberSignature Language="C#" Value="public virtual bool HasNonContiguousLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasNonContiguousLayout" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.HasNonContiguousLayout" />
      <MemberSignature Language="F#" Value="member this.HasNonContiguousLayout : bool" Usage="AppKit.NSLayoutManager.HasNonContiguousLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("hasNonContiguousLayout")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HyphenationFactor">
      <MemberSignature Language="C#" Value="public virtual float HyphenationFactor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 HyphenationFactor" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.HyphenationFactor" />
      <MemberSignature Language="F#" Value="member this.HyphenationFactor : single with get, set" Usage="AppKit.NSLayoutManager.HyphenationFactor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("hyphenationFactor")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setHyphenationFactor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertGlyph">
      <MemberSignature Language="C#" Value="public virtual void InsertGlyph (uint glyph, nint glyphIndex, nint charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertGlyph(unsigned int32 glyph, valuetype System.nint glyphIndex, valuetype System.nint charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.InsertGlyph(System.UInt32,System.nint,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member InsertGlyph : uint32 * nint * nint -&gt; unit&#xA;override this.InsertGlyph : uint32 * nint * nint -&gt; unit" Usage="nSLayoutManager.InsertGlyph (glyph, glyphIndex, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("insertGlyph:atGlyphIndex:characterIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, "Use 'SetGlyphs' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyph" Type="System.UInt32" />
        <Parameter Name="glyphIndex" Type="System.nint" />
        <Parameter Name="charIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="glyph">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <param name="charIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertTextContainer">
      <MemberSignature Language="C#" Value="public virtual void InsertTextContainer (AppKit.NSTextContainer container, nint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertTextContainer(class AppKit.NSTextContainer container, valuetype System.nint index) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.InsertTextContainer(AppKit.NSTextContainer,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member InsertTextContainer : AppKit.NSTextContainer * nint -&gt; unit&#xA;override this.InsertTextContainer : AppKit.NSTextContainer * nint -&gt; unit" Usage="nSLayoutManager.InsertTextContainer (container, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("insertTextContainer:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="AppKit.NSTextContainer" />
        <Parameter Name="index" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IntAttributeforGlyphAtIndex">
      <MemberSignature Language="C#" Value="public virtual nint IntAttributeforGlyphAtIndex (nint attributeTag, nint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint IntAttributeforGlyphAtIndex(valuetype System.nint attributeTag, valuetype System.nint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.IntAttributeforGlyphAtIndex(System.nint,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member IntAttributeforGlyphAtIndex : nint * nint -&gt; nint&#xA;override this.IntAttributeforGlyphAtIndex : nint * nint -&gt; nint" Usage="nSLayoutManager.IntAttributeforGlyphAtIndex (attributeTag, glyphIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use 'GetIntAttribute' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeTag" Type="System.nint" />
        <Parameter Name="glyphIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="attributeTag">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateDisplayForCharacterRange">
      <MemberSignature Language="C#" Value="public virtual void InvalidateDisplayForCharacterRange (Foundation.NSRange charRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateDisplayForCharacterRange(valuetype Foundation.NSRange charRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.InvalidateDisplayForCharacterRange(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member InvalidateDisplayForCharacterRange : Foundation.NSRange -&gt; unit&#xA;override this.InvalidateDisplayForCharacterRange : Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.InvalidateDisplayForCharacterRange charRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("invalidateDisplayForCharacterRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="charRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateDisplayForGlyphRange">
      <MemberSignature Language="C#" Value="public virtual void InvalidateDisplayForGlyphRange (Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateDisplayForGlyphRange(valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.InvalidateDisplayForGlyphRange(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member InvalidateDisplayForGlyphRange : Foundation.NSRange -&gt; unit&#xA;override this.InvalidateDisplayForGlyphRange : Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.InvalidateDisplayForGlyphRange glyphRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("invalidateDisplayForGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateGlyphs">
      <MemberSignature Language="C#" Value="public void InvalidateGlyphs (Foundation.NSRange characterRange, nint delta);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateGlyphs(valuetype Foundation.NSRange characterRange, valuetype System.nint delta) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.InvalidateGlyphs(Foundation.NSRange,System.nint)" />
      <MemberSignature Language="F#" Value="member this.InvalidateGlyphs : Foundation.NSRange * nint -&gt; unit" Usage="nSLayoutManager.InvalidateGlyphs (characterRange, delta)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterRange" Type="Foundation.NSRange" />
        <Parameter Name="delta" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="characterRange">To be added.</param>
        <param name="delta">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateGlyphs">
      <MemberSignature Language="C#" Value="public void InvalidateGlyphs (Foundation.NSRange characterRange, nint delta, out Foundation.NSRange actualCharacterRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateGlyphs(valuetype Foundation.NSRange characterRange, valuetype System.nint delta, [out] valuetype Foundation.NSRange&amp; actualCharacterRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.InvalidateGlyphs(Foundation.NSRange,System.nint,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="member this.InvalidateGlyphs : Foundation.NSRange * nint *  -&gt; unit" Usage="nSLayoutManager.InvalidateGlyphs (characterRange, delta, actualCharacterRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterRange" Type="Foundation.NSRange" />
        <Parameter Name="delta" Type="System.nint" />
        <Parameter Name="actualCharacterRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="characterRange">To be added.</param>
        <param name="delta">To be added.</param>
        <param name="actualCharacterRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateGlyphs">
      <MemberSignature Language="C#" Value="protected virtual void InvalidateGlyphs (Foundation.NSRange characterRange, nint delta, IntPtr actualCharacterRange);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InvalidateGlyphs(valuetype Foundation.NSRange characterRange, valuetype System.nint delta, native int actualCharacterRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.InvalidateGlyphs(Foundation.NSRange,System.nint,System.IntPtr)" />
      <MemberSignature Language="F#" Value="abstract member InvalidateGlyphs : Foundation.NSRange * nint * nativeint -&gt; unit&#xA;override this.InvalidateGlyphs : Foundation.NSRange * nint * nativeint -&gt; unit" Usage="nSLayoutManager.InvalidateGlyphs (characterRange, delta, actualCharacterRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterRange" Type="Foundation.NSRange" />
        <Parameter Name="delta" Type="System.nint" />
        <Parameter Name="actualCharacterRange" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="characterRange">To be added.</param>
        <param name="delta">To be added.</param>
        <param name="actualCharacterRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateGlyphsOnLayoutInvalidation">
      <MemberSignature Language="C#" Value="public virtual void InvalidateGlyphsOnLayoutInvalidation (Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateGlyphsOnLayoutInvalidation(valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.InvalidateGlyphsOnLayoutInvalidation(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member InvalidateGlyphsOnLayoutInvalidation : Foundation.NSRange -&gt; unit&#xA;override this.InvalidateGlyphsOnLayoutInvalidation : Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.InvalidateGlyphsOnLayoutInvalidation glyphRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("invalidateGlyphsOnLayoutInvalidationForGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, "Use 'SetGlyphs' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateLayout">
      <MemberSignature Language="C#" Value="public void InvalidateLayout (Foundation.NSRange characterRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateLayout(valuetype Foundation.NSRange characterRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.InvalidateLayout(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="member this.InvalidateLayout : Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.InvalidateLayout characterRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="characterRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateLayout">
      <MemberSignature Language="C#" Value="public void InvalidateLayout (Foundation.NSRange characterRange, out Foundation.NSRange actualCharacterRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateLayout(valuetype Foundation.NSRange characterRange, [out] valuetype Foundation.NSRange&amp; actualCharacterRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.InvalidateLayout(Foundation.NSRange,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="member this.InvalidateLayout : Foundation.NSRange *  -&gt; unit" Usage="nSLayoutManager.InvalidateLayout (characterRange, actualCharacterRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterRange" Type="Foundation.NSRange" />
        <Parameter Name="actualCharacterRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="characterRange">To be added.</param>
        <param name="actualCharacterRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateLayout">
      <MemberSignature Language="C#" Value="protected virtual void InvalidateLayout (Foundation.NSRange characterRange, IntPtr actualCharacterRange);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InvalidateLayout(valuetype Foundation.NSRange characterRange, native int actualCharacterRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.InvalidateLayout(Foundation.NSRange,System.IntPtr)" />
      <MemberSignature Language="F#" Value="abstract member InvalidateLayout : Foundation.NSRange * nativeint -&gt; unit&#xA;override this.InvalidateLayout : Foundation.NSRange * nativeint -&gt; unit" Usage="nSLayoutManager.InvalidateLayout (characterRange, actualCharacterRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("invalidateLayoutForCharacterRange:actualCharacterRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterRange" Type="Foundation.NSRange" />
        <Parameter Name="actualCharacterRange" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="characterRange">To be added.</param>
        <param name="actualCharacterRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidGlyphIndex">
      <MemberSignature Language="C#" Value="public virtual bool IsValidGlyphIndex (nint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidGlyphIndex(valuetype System.nint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.IsValidGlyphIndex(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member IsValidGlyphIndex : nint -&gt; bool&#xA;override this.IsValidGlyphIndex : nint -&gt; bool" Usage="nSLayoutManager.IsValidGlyphIndex glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("isValidGlyphIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutOptions">
      <MemberSignature Language="C#" Value="public virtual AppKit.NSGlyphStorageOptions LayoutOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype AppKit.NSGlyphStorageOptions LayoutOptions" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.LayoutOptions" />
      <MemberSignature Language="F#" Value="member this.LayoutOptions : AppKit.NSGlyphStorageOptions" Usage="AppKit.NSLayoutManager.LayoutOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("layoutOptions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSGlyphStorageOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutRect">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect LayoutRect (AppKit.NSTextBlock block, Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect LayoutRect(class AppKit.NSTextBlock block, valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.LayoutRect(AppKit.NSTextBlock,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member LayoutRect : AppKit.NSTextBlock * Foundation.NSRange -&gt; CoreGraphics.CGRect&#xA;override this.LayoutRect : AppKit.NSTextBlock * Foundation.NSRange -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.LayoutRect (block, glyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("layoutRectForTextBlock:glyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="block" Type="AppKit.NSTextBlock" />
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="block">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LimitsLayoutForSuspiciousContents">
      <MemberSignature Language="C#" Value="public virtual bool LimitsLayoutForSuspiciousContents { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LimitsLayoutForSuspiciousContents" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.LimitsLayoutForSuspiciousContents" />
      <MemberSignature Language="F#" Value="member this.LimitsLayoutForSuspiciousContents : bool with get, set" Usage="AppKit.NSLayoutManager.LimitsLayoutForSuspiciousContents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 14, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("limitsLayoutForSuspiciousContents")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 14, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setLimitsLayoutForSuspiciousContents:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 14, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocationForGlyphAtIndex">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint LocationForGlyphAtIndex (nint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGPoint LocationForGlyphAtIndex(valuetype System.nint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.LocationForGlyphAtIndex(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member LocationForGlyphAtIndex : nint -&gt; CoreGraphics.CGPoint&#xA;override this.LocationForGlyphAtIndex : nint -&gt; CoreGraphics.CGPoint" Usage="nSLayoutManager.LocationForGlyphAtIndex glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("locationForGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotShownAttributeForGlyphAtIndex">
      <MemberSignature Language="C#" Value="public virtual bool NotShownAttributeForGlyphAtIndex (nint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool NotShownAttributeForGlyphAtIndex(valuetype System.nint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.NotShownAttributeForGlyphAtIndex(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member NotShownAttributeForGlyphAtIndex : nint -&gt; bool&#xA;override this.NotShownAttributeForGlyphAtIndex : nint -&gt; bool" Usage="nSLayoutManager.NotShownAttributeForGlyphAtIndex glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("notShownAttributeForGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfGlyphs">
      <MemberSignature Language="C#" Value="public virtual nint NumberOfGlyphs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint NumberOfGlyphs" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.NumberOfGlyphs" />
      <MemberSignature Language="F#" Value="member this.NumberOfGlyphs : nint" Usage="AppKit.NSLayoutManager.NumberOfGlyphs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("numberOfGlyphs")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessEditing">
      <MemberSignature Language="C#" Value="public virtual void ProcessEditing (AppKit.NSTextStorage textStorage, AppKit.NSTextStorageEditActions editMask, Foundation.NSRange newCharRange, nint delta, Foundation.NSRange invalidatedCharRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessEditing(class AppKit.NSTextStorage textStorage, valuetype AppKit.NSTextStorageEditActions editMask, valuetype Foundation.NSRange newCharRange, valuetype System.nint delta, valuetype Foundation.NSRange invalidatedCharRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.ProcessEditing(AppKit.NSTextStorage,AppKit.NSTextStorageEditActions,Foundation.NSRange,System.nint,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member ProcessEditing : AppKit.NSTextStorage * AppKit.NSTextStorageEditActions * Foundation.NSRange * nint * Foundation.NSRange -&gt; unit&#xA;override this.ProcessEditing : AppKit.NSTextStorage * AppKit.NSTextStorageEditActions * Foundation.NSRange * nint * Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.ProcessEditing (textStorage, editMask, newCharRange, delta, invalidatedCharRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("processEditingForTextStorage:edited:range:changeInLength:invalidatedRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textStorage" Type="AppKit.NSTextStorage" />
        <Parameter Name="editMask" Type="AppKit.NSTextStorageEditActions" />
        <Parameter Name="newCharRange" Type="Foundation.NSRange" />
        <Parameter Name="delta" Type="System.nint" />
        <Parameter Name="invalidatedCharRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="textStorage">To be added.</param>
        <param name="editMask">To be added.</param>
        <param name="newCharRange">To be added.</param>
        <param name="delta">To be added.</param>
        <param name="invalidatedCharRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeOfNominallySpacedGlyphsContainingIndex">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange RangeOfNominallySpacedGlyphsContainingIndex (nint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSRange RangeOfNominallySpacedGlyphsContainingIndex(valuetype System.nint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.RangeOfNominallySpacedGlyphsContainingIndex(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member RangeOfNominallySpacedGlyphsContainingIndex : nint -&gt; Foundation.NSRange&#xA;override this.RangeOfNominallySpacedGlyphsContainingIndex : nint -&gt; Foundation.NSRange" Usage="nSLayoutManager.RangeOfNominallySpacedGlyphsContainingIndex glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("rangeOfNominallySpacedGlyphsContainingIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTemporaryAttribute">
      <MemberSignature Language="C#" Value="public void RemoveTemporaryAttribute (Foundation.NSString attributeName, Foundation.NSRange characterRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveTemporaryAttribute(class Foundation.NSString attributeName, valuetype Foundation.NSRange characterRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.RemoveTemporaryAttribute(Foundation.NSString,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="member this.RemoveTemporaryAttribute : Foundation.NSString * Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.RemoveTemporaryAttribute (attributeName, characterRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="Foundation.NSString" />
        <Parameter Name="characterRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="attributeName">To be added.</param>
        <param name="characterRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTemporaryAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveTemporaryAttribute (string attrName, Foundation.NSRange charRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveTemporaryAttribute(string attrName, valuetype Foundation.NSRange charRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.RemoveTemporaryAttribute(System.String,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member RemoveTemporaryAttribute : string * Foundation.NSRange -&gt; unit&#xA;override this.RemoveTemporaryAttribute : string * Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.RemoveTemporaryAttribute (attrName, charRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeTemporaryAttribute:forCharacterRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrName" Type="System.String" />
        <Parameter Name="charRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="attrName">To be added.</param>
        <param name="charRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTextContainer">
      <MemberSignature Language="C#" Value="public virtual void RemoveTextContainer (nint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveTextContainer(valuetype System.nint index) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.RemoveTextContainer(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member RemoveTextContainer : nint -&gt; unit&#xA;override this.RemoveTextContainer : nint -&gt; unit" Usage="nSLayoutManager.RemoveTextContainer index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeTextContainerAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceGlyphAtIndex">
      <MemberSignature Language="C#" Value="public virtual void ReplaceGlyphAtIndex (nint glyphIndex, uint newGlyph);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReplaceGlyphAtIndex(valuetype System.nint glyphIndex, unsigned int32 newGlyph) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.ReplaceGlyphAtIndex(System.nint,System.UInt32)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceGlyphAtIndex : nint * uint32 -&gt; unit&#xA;override this.ReplaceGlyphAtIndex : nint * uint32 -&gt; unit" Usage="nSLayoutManager.ReplaceGlyphAtIndex (glyphIndex, newGlyph)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("replaceGlyphAtIndex:withGlyph:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, "Use 'SetGlyphs' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nint" />
        <Parameter Name="newGlyph" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="newGlyph">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceTextStorage">
      <MemberSignature Language="C#" Value="public virtual void ReplaceTextStorage (AppKit.NSTextStorage newTextStorage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReplaceTextStorage(class AppKit.NSTextStorage newTextStorage) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.ReplaceTextStorage(AppKit.NSTextStorage)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceTextStorage : AppKit.NSTextStorage -&gt; unit&#xA;override this.ReplaceTextStorage : AppKit.NSTextStorage -&gt; unit" Usage="nSLayoutManager.ReplaceTextStorage newTextStorage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("replaceTextStorage:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newTextStorage" Type="AppKit.NSTextStorage" />
      </Parameters>
      <Docs>
        <param name="newTextStorage">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttachmentSize">
      <MemberSignature Language="C#" Value="public virtual void SetAttachmentSize (CoreGraphics.CGSize attachmentSize, Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAttachmentSize(valuetype CoreGraphics.CGSize attachmentSize, valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.SetAttachmentSize(CoreGraphics.CGSize,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetAttachmentSize : CoreGraphics.CGSize * Foundation.NSRange -&gt; unit&#xA;override this.SetAttachmentSize : CoreGraphics.CGSize * Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.SetAttachmentSize (attachmentSize, glyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setAttachmentSize:forGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachmentSize" Type="CoreGraphics.CGSize" />
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="attachmentSize">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBoundsRect">
      <MemberSignature Language="C#" Value="public virtual void SetBoundsRect (CoreGraphics.CGRect boundsRect, AppKit.NSTextBlock forTextBlock, Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBoundsRect(valuetype CoreGraphics.CGRect boundsRect, class AppKit.NSTextBlock forTextBlock, valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.SetBoundsRect(CoreGraphics.CGRect,AppKit.NSTextBlock,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetBoundsRect : CoreGraphics.CGRect * AppKit.NSTextBlock * Foundation.NSRange -&gt; unit&#xA;override this.SetBoundsRect : CoreGraphics.CGRect * AppKit.NSTextBlock * Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.SetBoundsRect (boundsRect, forTextBlock, glyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setBoundsRect:forTextBlock:glyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="boundsRect" Type="CoreGraphics.CGRect" />
        <Parameter Name="forTextBlock" Type="AppKit.NSTextBlock" />
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="boundsRect">To be added.</param>
        <param name="forTextBlock">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCharacterIndex">
      <MemberSignature Language="C#" Value="public virtual void SetCharacterIndex (nint charIndex, nint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCharacterIndex(valuetype System.nint charIndex, valuetype System.nint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.SetCharacterIndex(System.nint,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member SetCharacterIndex : nint * nint -&gt; unit&#xA;override this.SetCharacterIndex : nint * nint -&gt; unit" Usage="nSLayoutManager.SetCharacterIndex (charIndex, glyphIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setCharacterIndex:forGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, "Use 'SetGlyphs' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charIndex" Type="System.nint" />
        <Parameter Name="glyphIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="charIndex">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDrawsOutsideLineFragment">
      <MemberSignature Language="C#" Value="public virtual void SetDrawsOutsideLineFragment (bool flag, nint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDrawsOutsideLineFragment(bool flag, valuetype System.nint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.SetDrawsOutsideLineFragment(System.Boolean,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member SetDrawsOutsideLineFragment : bool * nint -&gt; unit&#xA;override this.SetDrawsOutsideLineFragment : bool * nint -&gt; unit" Usage="nSLayoutManager.SetDrawsOutsideLineFragment (flag, glyphIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setDrawsOutsideLineFragment:forGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Boolean" />
        <Parameter Name="glyphIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="flag">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetExtraLineFragmentRect">
      <MemberSignature Language="C#" Value="public virtual void SetExtraLineFragmentRect (CoreGraphics.CGRect fragmentRect, CoreGraphics.CGRect usedRect, AppKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetExtraLineFragmentRect(valuetype CoreGraphics.CGRect fragmentRect, valuetype CoreGraphics.CGRect usedRect, class AppKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.SetExtraLineFragmentRect(CoreGraphics.CGRect,CoreGraphics.CGRect,AppKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member SetExtraLineFragmentRect : CoreGraphics.CGRect * CoreGraphics.CGRect * AppKit.NSTextContainer -&gt; unit&#xA;override this.SetExtraLineFragmentRect : CoreGraphics.CGRect * CoreGraphics.CGRect * AppKit.NSTextContainer -&gt; unit" Usage="nSLayoutManager.SetExtraLineFragmentRect (fragmentRect, usedRect, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setExtraLineFragmentRect:usedRect:textContainer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragmentRect" Type="CoreGraphics.CGRect" />
        <Parameter Name="usedRect" Type="CoreGraphics.CGRect" />
        <Parameter Name="container" Type="AppKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="fragmentRect">To be added.</param>
        <param name="usedRect">To be added.</param>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetGlyphs">
      <MemberSignature Language="C#" Value="public virtual void SetGlyphs (IntPtr glyphs, IntPtr props, IntPtr charIndexes, AppKit.NSFont aFont, Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetGlyphs(native int glyphs, native int props, native int charIndexes, class AppKit.NSFont aFont, valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.SetGlyphs(System.IntPtr,System.IntPtr,System.IntPtr,AppKit.NSFont,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetGlyphs : nativeint * nativeint * nativeint * AppKit.NSFont * Foundation.NSRange -&gt; unit&#xA;override this.SetGlyphs : nativeint * nativeint * nativeint * AppKit.NSFont * Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.SetGlyphs (glyphs, props, charIndexes, aFont, glyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setGlyphs:properties:characterIndexes:font:forGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphs" Type="System.IntPtr" />
        <Parameter Name="props" Type="System.IntPtr" />
        <Parameter Name="charIndexes" Type="System.IntPtr" />
        <Parameter Name="aFont" Type="AppKit.NSFont" />
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="glyphs">To be added.</param>
        <param name="props">To be added.</param>
        <param name="charIndexes">To be added.</param>
        <param name="aFont">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIntAttribute">
      <MemberSignature Language="C#" Value="public virtual void SetIntAttribute (nint attributeTag, nint value, nint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetIntAttribute(valuetype System.nint attributeTag, valuetype System.nint value, valuetype System.nint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.SetIntAttribute(System.nint,System.nint,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member SetIntAttribute : nint * nint * nint -&gt; unit&#xA;override this.SetIntAttribute : nint * nint * nint -&gt; unit" Usage="nSLayoutManager.SetIntAttribute (attributeTag, value, glyphIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setIntAttribute:value:forGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, "Use 'SetGlyphs' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeTag" Type="System.nint" />
        <Parameter Name="value" Type="System.nint" />
        <Parameter Name="glyphIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="attributeTag">To be added.</param>
        <param name="value">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLayoutRect">
      <MemberSignature Language="C#" Value="public virtual void SetLayoutRect (CoreGraphics.CGRect layoutRect, AppKit.NSTextBlock forTextBlock, Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLayoutRect(valuetype CoreGraphics.CGRect layoutRect, class AppKit.NSTextBlock forTextBlock, valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.SetLayoutRect(CoreGraphics.CGRect,AppKit.NSTextBlock,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetLayoutRect : CoreGraphics.CGRect * AppKit.NSTextBlock * Foundation.NSRange -&gt; unit&#xA;override this.SetLayoutRect : CoreGraphics.CGRect * AppKit.NSTextBlock * Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.SetLayoutRect (layoutRect, forTextBlock, glyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setLayoutRect:forTextBlock:glyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutRect" Type="CoreGraphics.CGRect" />
        <Parameter Name="forTextBlock" Type="AppKit.NSTextBlock" />
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="layoutRect">To be added.</param>
        <param name="forTextBlock">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLineFragmentRect">
      <MemberSignature Language="C#" Value="public virtual void SetLineFragmentRect (CoreGraphics.CGRect fragmentRect, Foundation.NSRange glyphRange, CoreGraphics.CGRect usedRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLineFragmentRect(valuetype CoreGraphics.CGRect fragmentRect, valuetype Foundation.NSRange glyphRange, valuetype CoreGraphics.CGRect usedRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.SetLineFragmentRect(CoreGraphics.CGRect,Foundation.NSRange,CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member SetLineFragmentRect : CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGRect -&gt; unit&#xA;override this.SetLineFragmentRect : CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGRect -&gt; unit" Usage="nSLayoutManager.SetLineFragmentRect (fragmentRect, glyphRange, usedRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setLineFragmentRect:forGlyphRange:usedRect:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragmentRect" Type="CoreGraphics.CGRect" />
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="usedRect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="fragmentRect">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <param name="usedRect">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLocation">
      <MemberSignature Language="C#" Value="public virtual void SetLocation (CoreGraphics.CGPoint location, Foundation.NSRange forStartOfGlyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLocation(valuetype CoreGraphics.CGPoint location, valuetype Foundation.NSRange forStartOfGlyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.SetLocation(CoreGraphics.CGPoint,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetLocation : CoreGraphics.CGPoint * Foundation.NSRange -&gt; unit&#xA;override this.SetLocation : CoreGraphics.CGPoint * Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.SetLocation (location, forStartOfGlyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setLocation:forStartOfGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="CoreGraphics.CGPoint" />
        <Parameter Name="forStartOfGlyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="location">To be added.</param>
        <param name="forStartOfGlyphRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNotShownAttribute">
      <MemberSignature Language="C#" Value="public virtual void SetNotShownAttribute (bool flag, nint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetNotShownAttribute(bool flag, valuetype System.nint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.SetNotShownAttribute(System.Boolean,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member SetNotShownAttribute : bool * nint -&gt; unit&#xA;override this.SetNotShownAttribute : bool * nint -&gt; unit" Usage="nSLayoutManager.SetNotShownAttribute (flag, glyphIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setNotShownAttribute:forGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Boolean" />
        <Parameter Name="glyphIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="flag">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTemporaryAttributes">
      <MemberSignature Language="C#" Value="public virtual void SetTemporaryAttributes (Foundation.NSDictionary attrs, Foundation.NSRange charRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTemporaryAttributes(class Foundation.NSDictionary attrs, valuetype Foundation.NSRange charRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.SetTemporaryAttributes(Foundation.NSDictionary,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetTemporaryAttributes : Foundation.NSDictionary * Foundation.NSRange -&gt; unit&#xA;override this.SetTemporaryAttributes : Foundation.NSDictionary * Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.SetTemporaryAttributes (attrs, charRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setTemporaryAttributes:forCharacterRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrs" Type="Foundation.NSDictionary" />
        <Parameter Name="charRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="attrs">To be added.</param>
        <param name="charRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTextContainerForRange">
      <MemberSignature Language="C#" Value="public virtual void SetTextContainerForRange (AppKit.NSTextContainer container, Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTextContainerForRange(class AppKit.NSTextContainer container, valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.SetTextContainerForRange(AppKit.NSTextContainer,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetTextContainerForRange : AppKit.NSTextContainer * Foundation.NSRange -&gt; unit&#xA;override this.SetTextContainerForRange : AppKit.NSTextContainer * Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.SetTextContainerForRange (container, glyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setTextContainer:forGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="AppKit.NSTextContainer" />
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowAttachmentCell">
      <MemberSignature Language="C#" Value="public virtual void ShowAttachmentCell (AppKit.NSCell cell, CoreGraphics.CGRect rect, nuint characterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowAttachmentCell(class AppKit.NSCell cell, valuetype CoreGraphics.CGRect rect, valuetype System.nuint characterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.ShowAttachmentCell(AppKit.NSCell,CoreGraphics.CGRect,System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member ShowAttachmentCell : AppKit.NSCell * CoreGraphics.CGRect * nuint -&gt; unit&#xA;override this.ShowAttachmentCell : AppKit.NSCell * CoreGraphics.CGRect * nuint -&gt; unit" Usage="nSLayoutManager.ShowAttachmentCell (cell, rect, characterIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("showAttachmentCell:inRect:characterIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cell" Type="AppKit.NSCell" />
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
        <Parameter Name="characterIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="cell">To be added.</param>
        <param name="rect">To be added.</param>
        <param name="characterIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowGlyphs">
      <MemberSignature Language="C#" Value="public void ShowGlyphs (short[] glyphs, CoreGraphics.CGPoint[] positions, nuint glyphCount, AppKit.NSFont font, CoreGraphics.CGAffineTransform textMatrix, Foundation.NSDictionary attributes, CoreGraphics.CGContext graphicsContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowGlyphs(int16[] glyphs, valuetype CoreGraphics.CGPoint[] positions, valuetype System.nuint glyphCount, class AppKit.NSFont font, valuetype CoreGraphics.CGAffineTransform textMatrix, class Foundation.NSDictionary attributes, class CoreGraphics.CGContext graphicsContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.ShowGlyphs(System.Int16[],CoreGraphics.CGPoint[],System.nuint,AppKit.NSFont,CoreGraphics.CGAffineTransform,Foundation.NSDictionary,CoreGraphics.CGContext)" />
      <MemberSignature Language="F#" Value="member this.ShowGlyphs : int16[] * CoreGraphics.CGPoint[] * nuint * AppKit.NSFont * CoreGraphics.CGAffineTransform * Foundation.NSDictionary * CoreGraphics.CGContext -&gt; unit" Usage="nSLayoutManager.ShowGlyphs (glyphs, positions, glyphCount, font, textMatrix, attributes, graphicsContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphs" Type="System.Int16[]" />
        <Parameter Name="positions" Type="CoreGraphics.CGPoint[]" />
        <Parameter Name="glyphCount" Type="System.nuint" />
        <Parameter Name="font" Type="AppKit.NSFont" />
        <Parameter Name="textMatrix" Type="CoreGraphics.CGAffineTransform" />
        <Parameter Name="attributes" Type="Foundation.NSDictionary" />
        <Parameter Name="graphicsContext" Type="CoreGraphics.CGContext" />
      </Parameters>
      <Docs>
        <param name="glyphs">To be added.</param>
        <param name="positions">To be added.</param>
        <param name="glyphCount">To be added.</param>
        <param name="font">To be added.</param>
        <param name="textMatrix">To be added.</param>
        <param name="attributes">To be added.</param>
        <param name="graphicsContext">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowGlyphs">
      <MemberSignature Language="C#" Value="protected virtual void ShowGlyphs (IntPtr glyphs, IntPtr positions, nuint glyphCount, AppKit.NSFont font, CoreGraphics.CGAffineTransform textMatrix, Foundation.NSDictionary attributes, CoreGraphics.CGContext graphicsContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ShowGlyphs(native int glyphs, native int positions, valuetype System.nuint glyphCount, class AppKit.NSFont font, valuetype CoreGraphics.CGAffineTransform textMatrix, class Foundation.NSDictionary attributes, class CoreGraphics.CGContext graphicsContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.ShowGlyphs(System.IntPtr,System.IntPtr,System.nuint,AppKit.NSFont,CoreGraphics.CGAffineTransform,Foundation.NSDictionary,CoreGraphics.CGContext)" />
      <MemberSignature Language="F#" Value="abstract member ShowGlyphs : nativeint * nativeint * nuint * AppKit.NSFont * CoreGraphics.CGAffineTransform * Foundation.NSDictionary * CoreGraphics.CGContext -&gt; unit&#xA;override this.ShowGlyphs : nativeint * nativeint * nuint * AppKit.NSFont * CoreGraphics.CGAffineTransform * Foundation.NSDictionary * CoreGraphics.CGContext -&gt; unit" Usage="nSLayoutManager.ShowGlyphs (glyphs, positions, glyphCount, font, textMatrix, attributes, graphicsContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("showCGGlyphs:positions:count:font:matrix:attributes:inContext:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphs" Type="System.IntPtr" />
        <Parameter Name="positions" Type="System.IntPtr" />
        <Parameter Name="glyphCount" Type="System.nuint" />
        <Parameter Name="font" Type="AppKit.NSFont" />
        <Parameter Name="textMatrix" Type="CoreGraphics.CGAffineTransform" />
        <Parameter Name="attributes" Type="Foundation.NSDictionary" />
        <Parameter Name="graphicsContext" Type="CoreGraphics.CGContext" />
      </Parameters>
      <Docs>
        <param name="glyphs">To be added.</param>
        <param name="positions">To be added.</param>
        <param name="glyphCount">To be added.</param>
        <param name="font">To be added.</param>
        <param name="textMatrix">To be added.</param>
        <param name="attributes">To be added.</param>
        <param name="graphicsContext">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsControlCharacters">
      <MemberSignature Language="C#" Value="public virtual bool ShowsControlCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsControlCharacters" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.ShowsControlCharacters" />
      <MemberSignature Language="F#" Value="member this.ShowsControlCharacters : bool with get, set" Usage="AppKit.NSLayoutManager.ShowsControlCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("showsControlCharacters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShowsControlCharacters:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsInvisibleCharacters">
      <MemberSignature Language="C#" Value="public virtual bool ShowsInvisibleCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsInvisibleCharacters" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.ShowsInvisibleCharacters" />
      <MemberSignature Language="F#" Value="member this.ShowsInvisibleCharacters : bool with get, set" Usage="AppKit.NSLayoutManager.ShowsInvisibleCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("showsInvisibleCharacters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShowsInvisibleCharacters:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Strikethrough">
      <MemberSignature Language="C#" Value="public virtual void Strikethrough (Foundation.NSRange glyphRange, AppKit.NSUnderlineStyle strikethroughVal, CoreGraphics.CGRect lineRect, Foundation.NSRange lineGlyphRange, CoreGraphics.CGPoint containerOrigin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Strikethrough(valuetype Foundation.NSRange glyphRange, valuetype AppKit.NSUnderlineStyle strikethroughVal, valuetype CoreGraphics.CGRect lineRect, valuetype Foundation.NSRange lineGlyphRange, valuetype CoreGraphics.CGPoint containerOrigin) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.Strikethrough(Foundation.NSRange,AppKit.NSUnderlineStyle,CoreGraphics.CGRect,Foundation.NSRange,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member Strikethrough : Foundation.NSRange * AppKit.NSUnderlineStyle * CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit&#xA;override this.Strikethrough : Foundation.NSRange * AppKit.NSUnderlineStyle * CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit" Usage="nSLayoutManager.Strikethrough (glyphRange, strikethroughVal, lineRect, lineGlyphRange, containerOrigin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="strikethroughVal" Type="AppKit.NSUnderlineStyle" />
        <Parameter Name="lineRect" Type="CoreGraphics.CGRect" />
        <Parameter Name="lineGlyphRange" Type="Foundation.NSRange" />
        <Parameter Name="containerOrigin" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <param name="strikethroughVal">To be added.</param>
        <param name="lineRect">To be added.</param>
        <param name="lineGlyphRange">To be added.</param>
        <param name="containerOrigin">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubstituteFontForFont">
      <MemberSignature Language="C#" Value="public virtual AppKit.NSFont SubstituteFontForFont (AppKit.NSFont originalFont);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class AppKit.NSFont SubstituteFontForFont(class AppKit.NSFont originalFont) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.SubstituteFontForFont(AppKit.NSFont)" />
      <MemberSignature Language="F#" Value="abstract member SubstituteFontForFont : AppKit.NSFont -&gt; AppKit.NSFont&#xA;override this.SubstituteFontForFont : AppKit.NSFont -&gt; AppKit.NSFont" Usage="nSLayoutManager.SubstituteFontForFont originalFont" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("substituteFontForFont:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSFont</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalFont" Type="AppKit.NSFont" />
      </Parameters>
      <Docs>
        <param name="originalFont">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContainerChangedGeometry">
      <MemberSignature Language="C#" Value="public virtual void TextContainerChangedGeometry (AppKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TextContainerChangedGeometry(class AppKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.TextContainerChangedGeometry(AppKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member TextContainerChangedGeometry : AppKit.NSTextContainer -&gt; unit&#xA;override this.TextContainerChangedGeometry : AppKit.NSTextContainer -&gt; unit" Usage="nSLayoutManager.TextContainerChangedGeometry container" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("textContainerChangedGeometry:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="AppKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContainerChangedTextView">
      <MemberSignature Language="C#" Value="public virtual void TextContainerChangedTextView (AppKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TextContainerChangedTextView(class AppKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.TextContainerChangedTextView(AppKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member TextContainerChangedTextView : AppKit.NSTextContainer -&gt; unit&#xA;override this.TextContainerChangedTextView : AppKit.NSTextContainer -&gt; unit" Usage="nSLayoutManager.TextContainerChangedTextView container" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("textContainerChangedTextView:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="AppKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContainers">
      <MemberSignature Language="C#" Value="public virtual AppKit.NSTextContainer[] TextContainers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AppKit.NSTextContainer[] TextContainers" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.TextContainers" />
      <MemberSignature Language="F#" Value="member this.TextContainers : AppKit.NSTextContainer[]" Usage="AppKit.NSLayoutManager.TextContainers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("textContainers")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSTextContainer[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextStorage">
      <MemberSignature Language="C#" Value="public virtual AppKit.NSTextStorage TextStorage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AppKit.NSTextStorage TextStorage" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.TextStorage" />
      <MemberSignature Language="F#" Value="member this.TextStorage : AppKit.NSTextStorage with get, set" Usage="AppKit.NSLayoutManager.TextStorage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("textStorage", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTextStorage:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSTextStorage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextStorageEdited">
      <MemberSignature Language="C#" Value="public virtual void TextStorageEdited (AppKit.NSTextStorage str, AppKit.NSTextStorageEditedFlags editedMask, Foundation.NSRange newCharRange, nint changeInLength, Foundation.NSRange invalidatedCharRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TextStorageEdited(class AppKit.NSTextStorage str, valuetype AppKit.NSTextStorageEditedFlags editedMask, valuetype Foundation.NSRange newCharRange, valuetype System.nint changeInLength, valuetype Foundation.NSRange invalidatedCharRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.TextStorageEdited(AppKit.NSTextStorage,AppKit.NSTextStorageEditedFlags,Foundation.NSRange,System.nint,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member TextStorageEdited : AppKit.NSTextStorage * AppKit.NSTextStorageEditedFlags * Foundation.NSRange * nint * Foundation.NSRange -&gt; unit&#xA;override this.TextStorageEdited : AppKit.NSTextStorage * AppKit.NSTextStorageEditedFlags * Foundation.NSRange * nint * Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.TextStorageEdited (str, editedMask, newCharRange, changeInLength, invalidatedCharRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("textStorage:edited:range:changeInLength:invalidatedRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, "Use ProcessEditing (NSTextStorage textStorage, NSTextStorageEditActions editMask, NSRange newCharacterRange, nint delta, NSRange invalidatedCharacterRange) instead).")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="AppKit.NSTextStorage" />
        <Parameter Name="editedMask" Type="AppKit.NSTextStorageEditedFlags" />
        <Parameter Name="newCharRange" Type="Foundation.NSRange" />
        <Parameter Name="changeInLength" Type="System.nint" />
        <Parameter Name="invalidatedCharRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="str">To be added.</param>
        <param name="editedMask">To be added.</param>
        <param name="newCharRange">To be added.</param>
        <param name="changeInLength">To be added.</param>
        <param name="invalidatedCharRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Typesetter">
      <MemberSignature Language="C#" Value="public virtual AppKit.NSTypesetter Typesetter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AppKit.NSTypesetter Typesetter" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.Typesetter" />
      <MemberSignature Language="F#" Value="member this.Typesetter : AppKit.NSTypesetter with get, set" Usage="AppKit.NSLayoutManager.Typesetter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("typesetter", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTypesetter:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSTypesetter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypesetterBehavior">
      <MemberSignature Language="C#" Value="public virtual AppKit.NSTypesetterBehavior TypesetterBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype AppKit.NSTypesetterBehavior TypesetterBehavior" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.TypesetterBehavior" />
      <MemberSignature Language="F#" Value="member this.TypesetterBehavior : AppKit.NSTypesetterBehavior with get, set" Usage="AppKit.NSLayoutManager.TypesetterBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("typesetterBehavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTypesetterBehavior:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSTypesetterBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Underline">
      <MemberSignature Language="C#" Value="public virtual void Underline (Foundation.NSRange glyphRange, AppKit.NSUnderlineStyle underlineVal, CoreGraphics.CGRect lineRect, Foundation.NSRange lineGlyphRange, CoreGraphics.CGPoint containerOrigin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Underline(valuetype Foundation.NSRange glyphRange, valuetype AppKit.NSUnderlineStyle underlineVal, valuetype CoreGraphics.CGRect lineRect, valuetype Foundation.NSRange lineGlyphRange, valuetype CoreGraphics.CGPoint containerOrigin) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSLayoutManager.Underline(Foundation.NSRange,AppKit.NSUnderlineStyle,CoreGraphics.CGRect,Foundation.NSRange,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member Underline : Foundation.NSRange * AppKit.NSUnderlineStyle * CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit&#xA;override this.Underline : Foundation.NSRange * AppKit.NSUnderlineStyle * CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit" Usage="nSLayoutManager.Underline (glyphRange, underlineVal, lineRect, lineGlyphRange, containerOrigin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="underlineVal" Type="AppKit.NSUnderlineStyle" />
        <Parameter Name="lineRect" Type="CoreGraphics.CGRect" />
        <Parameter Name="lineGlyphRange" Type="Foundation.NSRange" />
        <Parameter Name="containerOrigin" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <param name="underlineVal">To be added.</param>
        <param name="lineRect">To be added.</param>
        <param name="lineGlyphRange">To be added.</param>
        <param name="containerOrigin">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsesFontLeading">
      <MemberSignature Language="C#" Value="public virtual bool UsesFontLeading { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UsesFontLeading" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.UsesFontLeading" />
      <MemberSignature Language="F#" Value="member this.UsesFontLeading : bool with get, set" Usage="AppKit.NSLayoutManager.UsesFontLeading" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("usesFontLeading")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setUsesFontLeading:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsesScreenFonts">
      <MemberSignature Language="C#" Value="public virtual bool UsesScreenFonts { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UsesScreenFonts" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.UsesScreenFonts" />
      <MemberSignature Language="F#" Value="member this.UsesScreenFonts : bool with get, set" Usage="AppKit.NSLayoutManager.UsesScreenFonts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("usesScreenFonts")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setUsesScreenFonts:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.iOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakDelegate" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSLayoutManager.WeakDelegate" />
      <MemberSignature Language="F#" Value="member this.WeakDelegate : Foundation.NSObject with get, set" Usage="AppKit.NSLayoutManager.WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("delegate", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDelegate:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
