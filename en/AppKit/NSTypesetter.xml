<Type Name="NSTypesetter" FullName="AppKit.NSTypesetter">
  <TypeSignature Language="C#" Value="public class NSTypesetter : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSTypesetter extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:AppKit.NSTypesetter" />
  <TypeSignature Language="F#" Value="type NSTypesetter = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.Mac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("NSTypesetter", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSTypesetter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSTypesetter (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new AppKit.NSTypesetter : Foundation.NSObjectFlag -&gt; AppKit.NSTypesetter" Usage="new AppKit.NSTypesetter t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NSTypesetter (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new AppKit.NSTypesetter : nativeint -&gt; AppKit.NSTypesetter" Usage="new AppKit.NSTypesetter handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributedString">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSAttributedString AttributedString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSAttributedString AttributedString" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSTypesetter.AttributedString" />
      <MemberSignature Language="F#" Value="member this.AttributedString : Foundation.NSAttributedString with get, set" Usage="AppKit.NSTypesetter.AttributedString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("attributedString")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAttributedString:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSAttributedString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributesForExtraLineFragment">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary AttributesForExtraLineFragment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDictionary AttributesForExtraLineFragment() cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.AttributesForExtraLineFragment" />
      <MemberSignature Language="F#" Value="abstract member AttributesForExtraLineFragment : unit -&gt; Foundation.NSDictionary&#xA;override this.AttributesForExtraLineFragment : unit -&gt; Foundation.NSDictionary" Usage="nSTypesetter.AttributesForExtraLineFragment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("attributesForExtraLineFragment")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLine">
      <MemberSignature Language="C#" Value="public virtual void BeginLine (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginLine(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.BeginLine(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member BeginLine : nuint -&gt; unit&#xA;override this.BeginLine : nuint -&gt; unit" Usage="nSTypesetter.BeginLine glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("beginLineWithGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginParagraph">
      <MemberSignature Language="C#" Value="public virtual void BeginParagraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginParagraph() cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.BeginParagraph" />
      <MemberSignature Language="F#" Value="abstract member BeginParagraph : unit -&gt; unit&#xA;override this.BeginParagraph : unit -&gt; unit" Usage="nSTypesetter.BeginParagraph " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("beginParagraph")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BidiProcessingEnabled">
      <MemberSignature Language="C#" Value="public virtual bool BidiProcessingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BidiProcessingEnabled" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSTypesetter.BidiProcessingEnabled" />
      <MemberSignature Language="F#" Value="member this.BidiProcessingEnabled : bool with get, set" Usage="AppKit.NSTypesetter.BidiProcessingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("bidiProcessingEnabled")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setBidiProcessingEnabled:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSTypesetter.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="AppKit.NSTypesetter.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentParagraphStyle">
      <MemberSignature Language="C#" Value="public virtual AppKit.NSParagraphStyle CurrentParagraphStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AppKit.NSParagraphStyle CurrentParagraphStyle" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSTypesetter.CurrentParagraphStyle" />
      <MemberSignature Language="F#" Value="member this.CurrentParagraphStyle : AppKit.NSParagraphStyle" Usage="AppKit.NSTypesetter.CurrentParagraphStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("currentParagraphStyle")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSParagraphStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentTextContainer">
      <MemberSignature Language="C#" Value="public virtual AppKit.NSTextContainer CurrentTextContainer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AppKit.NSTextContainer CurrentTextContainer" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSTypesetter.CurrentTextContainer" />
      <MemberSignature Language="F#" Value="member this.CurrentTextContainer : AppKit.NSTextContainer" Usage="AppKit.NSTypesetter.CurrentTextContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("currentTextContainer")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSTextContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultTypesetterBehavior">
      <MemberSignature Language="C#" Value="public static AppKit.NSTypesetterBehavior DefaultTypesetterBehavior { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype AppKit.NSTypesetterBehavior DefaultTypesetterBehavior" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSTypesetter.DefaultTypesetterBehavior" />
      <MemberSignature Language="F#" Value="member this.DefaultTypesetterBehavior : AppKit.NSTypesetterBehavior" Usage="AppKit.NSTypesetter.DefaultTypesetterBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("defaultTypesetterBehavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSTypesetterBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteGlyphs">
      <MemberSignature Language="C#" Value="public virtual void DeleteGlyphs (Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteGlyphs(valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.DeleteGlyphs(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member DeleteGlyphs : Foundation.NSRange -&gt; unit&#xA;override this.DeleteGlyphs : Foundation.NSRange -&gt; unit" Usage="nSTypesetter.DeleteGlyphs glyphRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("deleteGlyphsInRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndLine">
      <MemberSignature Language="C#" Value="public virtual void EndLine (Foundation.NSRange lineGlyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndLine(valuetype Foundation.NSRange lineGlyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.EndLine(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member EndLine : Foundation.NSRange -&gt; unit&#xA;override this.EndLine : Foundation.NSRange -&gt; unit" Usage="nSTypesetter.EndLine lineGlyphRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("endLineWithGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineGlyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="lineGlyphRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndParagraph">
      <MemberSignature Language="C#" Value="public virtual void EndParagraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndParagraph() cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.EndParagraph" />
      <MemberSignature Language="F#" Value="abstract member EndParagraph : unit -&gt; unit&#xA;override this.EndParagraph : unit -&gt; unit" Usage="nSTypesetter.EndParagraph " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("endParagraph")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActionForControlCharacter">
      <MemberSignature Language="C#" Value="public virtual AppKit.NSTypesetterControlCharacterAction GetActionForControlCharacter (nuint charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype AppKit.NSTypesetterControlCharacterAction GetActionForControlCharacter(valuetype System.nuint charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.GetActionForControlCharacter(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member GetActionForControlCharacter : nuint -&gt; AppKit.NSTypesetterControlCharacterAction&#xA;override this.GetActionForControlCharacter : nuint -&gt; AppKit.NSTypesetterControlCharacterAction" Usage="nSTypesetter.GetActionForControlCharacter charIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("actionForControlCharacterAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSTypesetterControlCharacterAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="charIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBaselineOffset">
      <MemberSignature Language="C#" Value="public virtual nfloat GetBaselineOffset (AppKit.NSLayoutManager layoutManager, nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat GetBaselineOffset(class AppKit.NSLayoutManager layoutManager, valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.GetBaselineOffset(AppKit.NSLayoutManager,System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member GetBaselineOffset : AppKit.NSLayoutManager * nuint -&gt; nfloat&#xA;override this.GetBaselineOffset : AppKit.NSLayoutManager * nuint -&gt; nfloat" Usage="nSTypesetter.GetBaselineOffset (layoutManager, glyphIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("baselineOffsetInLayoutManager:glyphIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutManager" Type="AppKit.NSLayoutManager" />
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="layoutManager">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBoundingBoxForControlGlyph">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect GetBoundingBoxForControlGlyph (nuint glyphIndex, AppKit.NSTextContainer textContainer, CoreGraphics.CGRect proposedLineFragment, CoreGraphics.CGPoint glyphPosition, nuint charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect GetBoundingBoxForControlGlyph(valuetype System.nuint glyphIndex, class AppKit.NSTextContainer textContainer, valuetype CoreGraphics.CGRect proposedLineFragment, valuetype CoreGraphics.CGPoint glyphPosition, valuetype System.nuint charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.GetBoundingBoxForControlGlyph(System.nuint,AppKit.NSTextContainer,CoreGraphics.CGRect,CoreGraphics.CGPoint,System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member GetBoundingBoxForControlGlyph : nuint * AppKit.NSTextContainer * CoreGraphics.CGRect * CoreGraphics.CGPoint * nuint -&gt; CoreGraphics.CGRect&#xA;override this.GetBoundingBoxForControlGlyph : nuint * AppKit.NSTextContainer * CoreGraphics.CGRect * CoreGraphics.CGPoint * nuint -&gt; CoreGraphics.CGRect" Usage="nSTypesetter.GetBoundingBoxForControlGlyph (glyphIndex, textContainer, proposedLineFragment, glyphPosition, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="textContainer" Type="AppKit.NSTextContainer" />
        <Parameter Name="proposedLineFragment" Type="CoreGraphics.CGRect" />
        <Parameter Name="glyphPosition" Type="CoreGraphics.CGPoint" />
        <Parameter Name="charIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="textContainer">To be added.</param>
        <param name="proposedLineFragment">To be added.</param>
        <param name="glyphPosition">To be added.</param>
        <param name="charIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharacterRangeForGlyphRange">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange GetCharacterRangeForGlyphRange (Foundation.NSRange glyphRange, out Foundation.NSRange actualGlyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSRange GetCharacterRangeForGlyphRange(valuetype Foundation.NSRange glyphRange, [out] valuetype Foundation.NSRange&amp; actualGlyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.GetCharacterRangeForGlyphRange(Foundation.NSRange,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="abstract member GetCharacterRangeForGlyphRange : Foundation.NSRange *  -&gt; Foundation.NSRange&#xA;override this.GetCharacterRangeForGlyphRange : Foundation.NSRange *  -&gt; Foundation.NSRange" Usage="nSTypesetter.GetCharacterRangeForGlyphRange (glyphRange, actualGlyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("characterRangeForGlyphRange:actualGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="actualGlyphRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <param name="actualGlyphRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGlyphsInRange">
      <MemberSignature Language="C#" Value="public virtual nuint GetGlyphsInRange (Foundation.NSRange glyphsRange, IntPtr glyphBuffer, IntPtr charIndexBuffer, IntPtr inscribeBuffer, IntPtr elasticBuffer, IntPtr bidiLevelBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nuint GetGlyphsInRange(valuetype Foundation.NSRange glyphsRange, native int glyphBuffer, native int charIndexBuffer, native int inscribeBuffer, native int elasticBuffer, native int bidiLevelBuffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.GetGlyphsInRange(Foundation.NSRange,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="F#" Value="abstract member GetGlyphsInRange : Foundation.NSRange * nativeint * nativeint * nativeint * nativeint * nativeint -&gt; nuint&#xA;override this.GetGlyphsInRange : Foundation.NSRange * nativeint * nativeint * nativeint * nativeint * nativeint -&gt; nuint" Usage="nSTypesetter.GetGlyphsInRange (glyphsRange, glyphBuffer, charIndexBuffer, inscribeBuffer, elasticBuffer, bidiLevelBuffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:bidiLevels:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphsRange" Type="Foundation.NSRange" />
        <Parameter Name="glyphBuffer" Type="System.IntPtr" />
        <Parameter Name="charIndexBuffer" Type="System.IntPtr" />
        <Parameter Name="inscribeBuffer" Type="System.IntPtr" />
        <Parameter Name="elasticBuffer" Type="System.IntPtr" />
        <Parameter Name="bidiLevelBuffer" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="glyphsRange">To be added.</param>
        <param name="glyphBuffer">To be added.</param>
        <param name="charIndexBuffer">To be added.</param>
        <param name="inscribeBuffer">To be added.</param>
        <param name="elasticBuffer">To be added.</param>
        <param name="bidiLevelBuffer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterGlyphSpacing">
      <MemberSignature Language="C#" Value="public static CoreGraphics.CGSize GetInterGlyphSpacing (AppKit.NSLayoutManager layoutManager, Foundation.NSRange nominallySpacedGlyphsRange, IntPtr packedGlyphs, nuint packedGlyphsCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype CoreGraphics.CGSize GetInterGlyphSpacing(class AppKit.NSLayoutManager layoutManager, valuetype Foundation.NSRange nominallySpacedGlyphsRange, native int packedGlyphs, valuetype System.nuint packedGlyphsCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.GetInterGlyphSpacing(AppKit.NSLayoutManager,Foundation.NSRange,System.IntPtr,System.nuint)" />
      <MemberSignature Language="F#" Value="static member GetInterGlyphSpacing : AppKit.NSLayoutManager * Foundation.NSRange * nativeint * nuint -&gt; CoreGraphics.CGSize" Usage="AppKit.NSTypesetter.GetInterGlyphSpacing (layoutManager, nominallySpacedGlyphsRange, packedGlyphs, packedGlyphsCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("printingAdjustmentInLayoutManager:forNominallySpacedGlyphRange:packedGlyphs:count:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutManager" Type="AppKit.NSLayoutManager" />
        <Parameter Name="nominallySpacedGlyphsRange" Type="Foundation.NSRange" />
        <Parameter Name="packedGlyphs" Type="System.IntPtr" />
        <Parameter Name="packedGlyphsCount" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="layoutManager">To be added.</param>
        <param name="nominallySpacedGlyphsRange">To be added.</param>
        <param name="packedGlyphs">To be added.</param>
        <param name="packedGlyphsCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineFragment">
      <MemberSignature Language="C#" Value="public virtual void GetLineFragment (out CoreGraphics.CGRect lineFragmentRect, out CoreGraphics.CGRect lineFragmentUsedRect, Foundation.NSRange paragraphSeparatorGlyphRange, CoreGraphics.CGPoint proposedOrigin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetLineFragment([out] valuetype CoreGraphics.CGRect&amp; lineFragmentRect, [out] valuetype CoreGraphics.CGRect&amp; lineFragmentUsedRect, valuetype Foundation.NSRange paragraphSeparatorGlyphRange, valuetype CoreGraphics.CGPoint proposedOrigin) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.GetLineFragment(CoreGraphics.CGRect@,CoreGraphics.CGRect@,Foundation.NSRange,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member GetLineFragment :  *  * Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit&#xA;override this.GetLineFragment :  *  * Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit" Usage="nSTypesetter.GetLineFragment (lineFragmentRect, lineFragmentUsedRect, paragraphSeparatorGlyphRange, proposedOrigin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("getLineFragmentRect:usedRect:forParagraphSeparatorGlyphRange:atProposedOrigin:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineFragmentRect" Type="CoreGraphics.CGRect" RefType="out" />
        <Parameter Name="lineFragmentUsedRect" Type="CoreGraphics.CGRect" RefType="out" />
        <Parameter Name="paragraphSeparatorGlyphRange" Type="Foundation.NSRange" />
        <Parameter Name="proposedOrigin" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="lineFragmentRect">To be added.</param>
        <param name="lineFragmentUsedRect">To be added.</param>
        <param name="paragraphSeparatorGlyphRange">To be added.</param>
        <param name="proposedOrigin">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineFragment">
      <MemberSignature Language="C#" Value="public virtual void GetLineFragment (out CoreGraphics.CGRect lineFragment, out CoreGraphics.CGRect lineFragmentUsed, out CoreGraphics.CGRect remaining, nuint startingGlyphIndex, CoreGraphics.CGRect proposedRect, nfloat lineSpacing, nfloat paragraphSpacingBefore, nfloat paragraphSpacingAfter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetLineFragment([out] valuetype CoreGraphics.CGRect&amp; lineFragment, [out] valuetype CoreGraphics.CGRect&amp; lineFragmentUsed, [out] valuetype CoreGraphics.CGRect&amp; remaining, valuetype System.nuint startingGlyphIndex, valuetype CoreGraphics.CGRect proposedRect, valuetype System.nfloat lineSpacing, valuetype System.nfloat paragraphSpacingBefore, valuetype System.nfloat paragraphSpacingAfter) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.GetLineFragment(CoreGraphics.CGRect@,CoreGraphics.CGRect@,CoreGraphics.CGRect@,System.nuint,CoreGraphics.CGRect,System.nfloat,System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="abstract member GetLineFragment :  *  *  * nuint * CoreGraphics.CGRect * nfloat * nfloat * nfloat -&gt; unit&#xA;override this.GetLineFragment :  *  *  * nuint * CoreGraphics.CGRect * nfloat * nfloat * nfloat -&gt; unit" Usage="nSTypesetter.GetLineFragment (lineFragment, lineFragmentUsed, remaining, startingGlyphIndex, proposedRect, lineSpacing, paragraphSpacingBefore, paragraphSpacingAfter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("getLineFragmentRect:usedRect:remainingRect:forStartingGlyphAtIndex:proposedRect:lineSpacing:paragraphSpacingBefore:paragraphSpacingAfter:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineFragment" Type="CoreGraphics.CGRect" RefType="out" />
        <Parameter Name="lineFragmentUsed" Type="CoreGraphics.CGRect" RefType="out" />
        <Parameter Name="remaining" Type="CoreGraphics.CGRect" RefType="out" />
        <Parameter Name="startingGlyphIndex" Type="System.nuint" />
        <Parameter Name="proposedRect" Type="CoreGraphics.CGRect" />
        <Parameter Name="lineSpacing" Type="System.nfloat" />
        <Parameter Name="paragraphSpacingBefore" Type="System.nfloat" />
        <Parameter Name="paragraphSpacingAfter" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="lineFragment">To be added.</param>
        <param name="lineFragmentUsed">To be added.</param>
        <param name="remaining">To be added.</param>
        <param name="startingGlyphIndex">To be added.</param>
        <param name="proposedRect">To be added.</param>
        <param name="lineSpacing">To be added.</param>
        <param name="paragraphSpacingBefore">To be added.</param>
        <param name="paragraphSpacingAfter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineSpacingAfterGlyph">
      <MemberSignature Language="C#" Value="public virtual nfloat GetLineSpacingAfterGlyph (nuint glyphIndex, CoreGraphics.CGRect proposedLineFragmentRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat GetLineSpacingAfterGlyph(valuetype System.nuint glyphIndex, valuetype CoreGraphics.CGRect proposedLineFragmentRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.GetLineSpacingAfterGlyph(System.nuint,CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member GetLineSpacingAfterGlyph : nuint * CoreGraphics.CGRect -&gt; nfloat&#xA;override this.GetLineSpacingAfterGlyph : nuint * CoreGraphics.CGRect -&gt; nfloat" Usage="nSTypesetter.GetLineSpacingAfterGlyph (glyphIndex, proposedLineFragmentRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="proposedLineFragmentRect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="proposedLineFragmentRect">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParagraphSpacingAfterGlyph">
      <MemberSignature Language="C#" Value="public virtual nfloat GetParagraphSpacingAfterGlyph (nuint glyphIndex, CoreGraphics.CGRect proposedLineFragmentRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat GetParagraphSpacingAfterGlyph(valuetype System.nuint glyphIndex, valuetype CoreGraphics.CGRect proposedLineFragmentRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.GetParagraphSpacingAfterGlyph(System.nuint,CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member GetParagraphSpacingAfterGlyph : nuint * CoreGraphics.CGRect -&gt; nfloat&#xA;override this.GetParagraphSpacingAfterGlyph : nuint * CoreGraphics.CGRect -&gt; nfloat" Usage="nSTypesetter.GetParagraphSpacingAfterGlyph (glyphIndex, proposedLineFragmentRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="proposedLineFragmentRect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="proposedLineFragmentRect">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParagraphSpacingBeforeGlyph">
      <MemberSignature Language="C#" Value="public virtual nfloat GetParagraphSpacingBeforeGlyph (nuint glyphIndex, CoreGraphics.CGRect proposedLineFragmentRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat GetParagraphSpacingBeforeGlyph(valuetype System.nuint glyphIndex, valuetype CoreGraphics.CGRect proposedLineFragmentRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.GetParagraphSpacingBeforeGlyph(System.nuint,CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member GetParagraphSpacingBeforeGlyph : nuint * CoreGraphics.CGRect -&gt; nfloat&#xA;override this.GetParagraphSpacingBeforeGlyph : nuint * CoreGraphics.CGRect -&gt; nfloat" Usage="nSTypesetter.GetParagraphSpacingBeforeGlyph (glyphIndex, proposedLineFragmentRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="proposedLineFragmentRect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="proposedLineFragmentRect">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSharedSystemTypesetter">
      <MemberSignature Language="C#" Value="public static AppKit.NSTypesetter GetSharedSystemTypesetter (AppKit.NSTypesetterBehavior forBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AppKit.NSTypesetter GetSharedSystemTypesetter(valuetype AppKit.NSTypesetterBehavior forBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.GetSharedSystemTypesetter(AppKit.NSTypesetterBehavior)" />
      <MemberSignature Language="F#" Value="static member GetSharedSystemTypesetter : AppKit.NSTypesetterBehavior -&gt; AppKit.NSTypesetter" Usage="AppKit.NSTypesetter.GetSharedSystemTypesetter forBehavior" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("sharedSystemTypesetterForBehavior:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSTypesetter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forBehavior" Type="AppKit.NSTypesetterBehavior" />
      </Parameters>
      <Docs>
        <param name="forBehavior">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSubstituteFont">
      <MemberSignature Language="C#" Value="public virtual AppKit.NSFont GetSubstituteFont (AppKit.NSFont originalFont);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class AppKit.NSFont GetSubstituteFont(class AppKit.NSFont originalFont) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.GetSubstituteFont(AppKit.NSFont)" />
      <MemberSignature Language="F#" Value="abstract member GetSubstituteFont : AppKit.NSFont -&gt; AppKit.NSFont&#xA;override this.GetSubstituteFont : AppKit.NSFont -&gt; AppKit.NSFont" Usage="nSTypesetter.GetSubstituteFont originalFont" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("substituteFontForFont:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSFont</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalFont" Type="AppKit.NSFont" />
      </Parameters>
      <Docs>
        <param name="originalFont">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextTab">
      <MemberSignature Language="C#" Value="public virtual AppKit.NSTextTab GetTextTab (nfloat glyphLocation, AppKit.NSWritingDirection direction, nfloat maxLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class AppKit.NSTextTab GetTextTab(valuetype System.nfloat glyphLocation, valuetype AppKit.NSWritingDirection direction, valuetype System.nfloat maxLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.GetTextTab(System.nfloat,AppKit.NSWritingDirection,System.nfloat)" />
      <MemberSignature Language="F#" Value="abstract member GetTextTab : nfloat * AppKit.NSWritingDirection * nfloat -&gt; AppKit.NSTextTab&#xA;override this.GetTextTab : nfloat * AppKit.NSWritingDirection * nfloat -&gt; AppKit.NSTextTab" Usage="nSTypesetter.GetTextTab (glyphLocation, direction, maxLocation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("textTabForGlyphLocation:writingDirection:maxLocation:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSTextTab</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphLocation" Type="System.nfloat" />
        <Parameter Name="direction" Type="AppKit.NSWritingDirection" />
        <Parameter Name="maxLocation" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="glyphLocation">To be added.</param>
        <param name="direction">To be added.</param>
        <param name="maxLocation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphRangeForCharacterRange">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange GlyphRangeForCharacterRange (Foundation.NSRange charRange, out Foundation.NSRange actualCharRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSRange GlyphRangeForCharacterRange(valuetype Foundation.NSRange charRange, [out] valuetype Foundation.NSRange&amp; actualCharRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.GlyphRangeForCharacterRange(Foundation.NSRange,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="abstract member GlyphRangeForCharacterRange : Foundation.NSRange *  -&gt; Foundation.NSRange&#xA;override this.GlyphRangeForCharacterRange : Foundation.NSRange *  -&gt; Foundation.NSRange" Usage="nSTypesetter.GlyphRangeForCharacterRange (charRange, actualCharRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("glyphRangeForCharacterRange:actualCharacterRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charRange" Type="Foundation.NSRange" />
        <Parameter Name="actualCharRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="charRange">To be added.</param>
        <param name="actualCharRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HyphenationFactor">
      <MemberSignature Language="C#" Value="public virtual float HyphenationFactor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 HyphenationFactor" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSTypesetter.HyphenationFactor" />
      <MemberSignature Language="F#" Value="member this.HyphenationFactor : single with get, set" Usage="AppKit.NSTypesetter.HyphenationFactor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("hyphenationFactor")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setHyphenationFactor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HyphenationFactorForGlyph">
      <MemberSignature Language="C#" Value="public virtual float HyphenationFactorForGlyph (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 HyphenationFactorForGlyph(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.HyphenationFactorForGlyph(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member HyphenationFactorForGlyph : nuint -&gt; single&#xA;override this.HyphenationFactorForGlyph : nuint -&gt; single" Usage="nSTypesetter.HyphenationFactorForGlyph glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("hyphenationFactorForGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HyphenCharacterForGlyph">
      <MemberSignature Language="C#" Value="public virtual uint HyphenCharacterForGlyph (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int32 HyphenCharacterForGlyph(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.HyphenCharacterForGlyph(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member HyphenCharacterForGlyph : nuint -&gt; uint32&#xA;override this.HyphenCharacterForGlyph : nuint -&gt; uint32" Usage="nSTypesetter.HyphenCharacterForGlyph glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("hyphenCharacterForGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertGlyph">
      <MemberSignature Language="C#" Value="public virtual void InsertGlyph (uint glyph, nuint glyphIndex, nuint characterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertGlyph(unsigned int32 glyph, valuetype System.nuint glyphIndex, valuetype System.nuint characterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.InsertGlyph(System.UInt32,System.nuint,System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member InsertGlyph : uint32 * nuint * nuint -&gt; unit&#xA;override this.InsertGlyph : uint32 * nuint * nuint -&gt; unit" Usage="nSTypesetter.InsertGlyph (glyph, glyphIndex, characterIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("insertGlyph:atGlyphIndex:characterIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyph" Type="System.UInt32" />
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="characterIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyph">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <param name="characterIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutCharacters">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange LayoutCharacters (Foundation.NSRange characterRange, AppKit.NSLayoutManager layoutManager, nuint maxLineFragments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSRange LayoutCharacters(valuetype Foundation.NSRange characterRange, class AppKit.NSLayoutManager layoutManager, valuetype System.nuint maxLineFragments) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.LayoutCharacters(Foundation.NSRange,AppKit.NSLayoutManager,System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member LayoutCharacters : Foundation.NSRange * AppKit.NSLayoutManager * nuint -&gt; Foundation.NSRange&#xA;override this.LayoutCharacters : Foundation.NSRange * AppKit.NSLayoutManager * nuint -&gt; Foundation.NSRange" Usage="nSTypesetter.LayoutCharacters (characterRange, layoutManager, maxLineFragments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("layoutCharactersInRange:forLayoutManager:maximumNumberOfLineFragments:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterRange" Type="Foundation.NSRange" />
        <Parameter Name="layoutManager" Type="AppKit.NSLayoutManager" />
        <Parameter Name="maxLineFragments" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="characterRange">To be added.</param>
        <param name="layoutManager">To be added.</param>
        <param name="maxLineFragments">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutGlyphs">
      <MemberSignature Language="C#" Value="public virtual void LayoutGlyphs (AppKit.NSLayoutManager layoutManager, nuint startGlyphIndex, nuint maxLineFragments, out nuint nextGlyph);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LayoutGlyphs(class AppKit.NSLayoutManager layoutManager, valuetype System.nuint startGlyphIndex, valuetype System.nuint maxLineFragments, [out] valuetype System.nuint&amp; nextGlyph) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.LayoutGlyphs(AppKit.NSLayoutManager,System.nuint,System.nuint,System.nuint@)" />
      <MemberSignature Language="F#" Value="abstract member LayoutGlyphs : AppKit.NSLayoutManager * nuint * nuint *  -&gt; unit&#xA;override this.LayoutGlyphs : AppKit.NSLayoutManager * nuint * nuint *  -&gt; unit" Usage="nSTypesetter.LayoutGlyphs (layoutManager, startGlyphIndex, maxLineFragments, nextGlyph)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("layoutGlyphsInLayoutManager:startingAtGlyphIndex:maxNumberOfLineFragments:nextGlyphIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutManager" Type="AppKit.NSLayoutManager" />
        <Parameter Name="startGlyphIndex" Type="System.nuint" />
        <Parameter Name="maxLineFragments" Type="System.nuint" />
        <Parameter Name="nextGlyph" Type="System.nuint" RefType="out" />
      </Parameters>
      <Docs>
        <param name="layoutManager">To be added.</param>
        <param name="startGlyphIndex">To be added.</param>
        <param name="maxLineFragments">To be added.</param>
        <param name="nextGlyph">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutManager">
      <MemberSignature Language="C#" Value="public virtual AppKit.NSLayoutManager LayoutManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AppKit.NSLayoutManager LayoutManager" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSTypesetter.LayoutManager" />
      <MemberSignature Language="F#" Value="member this.LayoutManager : AppKit.NSLayoutManager" Usage="AppKit.NSTypesetter.LayoutManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("layoutManager")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSLayoutManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutParagraphAtPoint">
      <MemberSignature Language="C#" Value="public virtual nuint LayoutParagraphAtPoint (ref CoreGraphics.CGPoint lineFragmentOrigin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nuint LayoutParagraphAtPoint(valuetype CoreGraphics.CGPoint&amp; lineFragmentOrigin) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.LayoutParagraphAtPoint(CoreGraphics.CGPoint@)" />
      <MemberSignature Language="F#" Value="abstract member LayoutParagraphAtPoint :  -&gt; nuint&#xA;override this.LayoutParagraphAtPoint :  -&gt; nuint" Usage="nSTypesetter.LayoutParagraphAtPoint lineFragmentOrigin" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("layoutParagraphAtPoint:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineFragmentOrigin" Type="CoreGraphics.CGPoint" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lineFragmentOrigin">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineFragmentPadding">
      <MemberSignature Language="C#" Value="public virtual nfloat LineFragmentPadding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat LineFragmentPadding" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSTypesetter.LineFragmentPadding" />
      <MemberSignature Language="F#" Value="member this.LineFragmentPadding : nfloat with get, set" Usage="AppKit.NSTypesetter.LineFragmentPadding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("lineFragmentPadding")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setLineFragmentPadding:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParagraphCharacterRange">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange ParagraphCharacterRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Foundation.NSRange ParagraphCharacterRange" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSTypesetter.ParagraphCharacterRange" />
      <MemberSignature Language="F#" Value="member this.ParagraphCharacterRange : Foundation.NSRange" Usage="AppKit.NSTypesetter.ParagraphCharacterRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("paragraphCharacterRange")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParagraphGlyphRange">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange ParagraphGlyphRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Foundation.NSRange ParagraphGlyphRange" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSTypesetter.ParagraphGlyphRange" />
      <MemberSignature Language="F#" Value="member this.ParagraphGlyphRange : Foundation.NSRange" Usage="AppKit.NSTypesetter.ParagraphGlyphRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("paragraphGlyphRange")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParagraphSeparatorCharacterRange">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange ParagraphSeparatorCharacterRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Foundation.NSRange ParagraphSeparatorCharacterRange" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSTypesetter.ParagraphSeparatorCharacterRange" />
      <MemberSignature Language="F#" Value="member this.ParagraphSeparatorCharacterRange : Foundation.NSRange" Usage="AppKit.NSTypesetter.ParagraphSeparatorCharacterRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("paragraphSeparatorCharacterRange")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParagraphSeparatorGlyphRange">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange ParagraphSeparatorGlyphRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Foundation.NSRange ParagraphSeparatorGlyphRange" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSTypesetter.ParagraphSeparatorGlyphRange" />
      <MemberSignature Language="F#" Value="member this.ParagraphSeparatorGlyphRange : Foundation.NSRange" Usage="AppKit.NSTypesetter.ParagraphSeparatorGlyphRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("paragraphSeparatorGlyphRange")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttachmentSize">
      <MemberSignature Language="C#" Value="public virtual void SetAttachmentSize (CoreGraphics.CGSize attachmentSize, Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAttachmentSize(valuetype CoreGraphics.CGSize attachmentSize, valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.SetAttachmentSize(CoreGraphics.CGSize,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetAttachmentSize : CoreGraphics.CGSize * Foundation.NSRange -&gt; unit&#xA;override this.SetAttachmentSize : CoreGraphics.CGSize * Foundation.NSRange -&gt; unit" Usage="nSTypesetter.SetAttachmentSize (attachmentSize, glyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setAttachmentSize:forGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachmentSize" Type="CoreGraphics.CGSize" />
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="attachmentSize">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBidiLevels">
      <MemberSignature Language="C#" Value="public virtual void SetBidiLevels (IntPtr levels, Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBidiLevels(native int levels, valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.SetBidiLevels(System.IntPtr,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetBidiLevels : nativeint * Foundation.NSRange -&gt; unit&#xA;override this.SetBidiLevels : nativeint * Foundation.NSRange -&gt; unit" Usage="nSTypesetter.SetBidiLevels (levels, glyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setBidiLevels:forGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="levels" Type="System.IntPtr" />
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="levels">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDrawsOutsideLineFragment">
      <MemberSignature Language="C#" Value="public virtual void SetDrawsOutsideLineFragment (bool flag, Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDrawsOutsideLineFragment(bool flag, valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.SetDrawsOutsideLineFragment(System.Boolean,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetDrawsOutsideLineFragment : bool * Foundation.NSRange -&gt; unit&#xA;override this.SetDrawsOutsideLineFragment : bool * Foundation.NSRange -&gt; unit" Usage="nSTypesetter.SetDrawsOutsideLineFragment (flag, glyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setDrawsOutsideLineFragment:forGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Boolean" />
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="flag">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHardInvalidation">
      <MemberSignature Language="C#" Value="public virtual void SetHardInvalidation (bool value, Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetHardInvalidation(bool value, valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.SetHardInvalidation(System.Boolean,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetHardInvalidation : bool * Foundation.NSRange -&gt; unit&#xA;override this.SetHardInvalidation : bool * Foundation.NSRange -&gt; unit" Usage="nSTypesetter.SetHardInvalidation (value, glyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setHardInvalidation:forGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLineFragment">
      <MemberSignature Language="C#" Value="public virtual void SetLineFragment (CoreGraphics.CGRect fragmentRect, Foundation.NSRange glyphRange, CoreGraphics.CGRect usedRect, nfloat baselineOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLineFragment(valuetype CoreGraphics.CGRect fragmentRect, valuetype Foundation.NSRange glyphRange, valuetype CoreGraphics.CGRect usedRect, valuetype System.nfloat baselineOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.SetLineFragment(CoreGraphics.CGRect,Foundation.NSRange,CoreGraphics.CGRect,System.nfloat)" />
      <MemberSignature Language="F#" Value="abstract member SetLineFragment : CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGRect * nfloat -&gt; unit&#xA;override this.SetLineFragment : CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGRect * nfloat -&gt; unit" Usage="nSTypesetter.SetLineFragment (fragmentRect, glyphRange, usedRect, baselineOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setLineFragmentRect:forGlyphRange:usedRect:baselineOffset:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragmentRect" Type="CoreGraphics.CGRect" />
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="usedRect" Type="CoreGraphics.CGRect" />
        <Parameter Name="baselineOffset" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="fragmentRect">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <param name="usedRect">To be added.</param>
        <param name="baselineOffset">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLocation">
      <MemberSignature Language="C#" Value="public virtual void SetLocation (CoreGraphics.CGPoint location, IntPtr advancements, Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLocation(valuetype CoreGraphics.CGPoint location, native int advancements, valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.SetLocation(CoreGraphics.CGPoint,System.IntPtr,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetLocation : CoreGraphics.CGPoint * nativeint * Foundation.NSRange -&gt; unit&#xA;override this.SetLocation : CoreGraphics.CGPoint * nativeint * Foundation.NSRange -&gt; unit" Usage="nSTypesetter.SetLocation (location, advancements, glyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setLocation:withAdvancements:forStartOfGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="CoreGraphics.CGPoint" />
        <Parameter Name="advancements" Type="System.IntPtr" />
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="location">To be added.</param>
        <param name="advancements">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNotShownAttribute">
      <MemberSignature Language="C#" Value="public virtual void SetNotShownAttribute (bool flag, Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetNotShownAttribute(bool flag, valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.SetNotShownAttribute(System.Boolean,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetNotShownAttribute : bool * Foundation.NSRange -&gt; unit&#xA;override this.SetNotShownAttribute : bool * Foundation.NSRange -&gt; unit" Usage="nSTypesetter.SetNotShownAttribute (flag, glyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setNotShownAttribute:forGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Boolean" />
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="flag">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetParagraphGlyphRange">
      <MemberSignature Language="C#" Value="public virtual void SetParagraphGlyphRange (Foundation.NSRange paragraphRange, Foundation.NSRange paragraphSeparatorRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetParagraphGlyphRange(valuetype Foundation.NSRange paragraphRange, valuetype Foundation.NSRange paragraphSeparatorRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.SetParagraphGlyphRange(Foundation.NSRange,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetParagraphGlyphRange : Foundation.NSRange * Foundation.NSRange -&gt; unit&#xA;override this.SetParagraphGlyphRange : Foundation.NSRange * Foundation.NSRange -&gt; unit" Usage="nSTypesetter.SetParagraphGlyphRange (paragraphRange, paragraphSeparatorRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setParagraphGlyphRange:separatorGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paragraphRange" Type="Foundation.NSRange" />
        <Parameter Name="paragraphSeparatorRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="paragraphRange">To be added.</param>
        <param name="paragraphSeparatorRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SharedSystemTypesetter">
      <MemberSignature Language="C#" Value="public static AppKit.NSTypesetter SharedSystemTypesetter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class AppKit.NSTypesetter SharedSystemTypesetter" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSTypesetter.SharedSystemTypesetter" />
      <MemberSignature Language="F#" Value="member this.SharedSystemTypesetter : AppKit.NSTypesetter" Usage="AppKit.NSTypesetter.SharedSystemTypesetter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("sharedSystemTypesetter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSTypesetter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldBreakLineByHyphenatingBeforeCharacter">
      <MemberSignature Language="C#" Value="public virtual bool ShouldBreakLineByHyphenatingBeforeCharacter (nuint charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldBreakLineByHyphenatingBeforeCharacter(valuetype System.nuint charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.ShouldBreakLineByHyphenatingBeforeCharacter(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member ShouldBreakLineByHyphenatingBeforeCharacter : nuint -&gt; bool&#xA;override this.ShouldBreakLineByHyphenatingBeforeCharacter : nuint -&gt; bool" Usage="nSTypesetter.ShouldBreakLineByHyphenatingBeforeCharacter charIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("shouldBreakLineByHyphenatingBeforeCharacterAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="charIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldBreakLineByWordBeforeCharacter">
      <MemberSignature Language="C#" Value="public virtual bool ShouldBreakLineByWordBeforeCharacter (nuint charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldBreakLineByWordBeforeCharacter(valuetype System.nuint charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.ShouldBreakLineByWordBeforeCharacter(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member ShouldBreakLineByWordBeforeCharacter : nuint -&gt; bool&#xA;override this.ShouldBreakLineByWordBeforeCharacter : nuint -&gt; bool" Usage="nSTypesetter.ShouldBreakLineByWordBeforeCharacter charIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("shouldBreakLineByWordBeforeCharacterAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="charIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubstituteGlyphs">
      <MemberSignature Language="C#" Value="public virtual void SubstituteGlyphs (Foundation.NSRange glyphRange, IntPtr glyphs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SubstituteGlyphs(valuetype Foundation.NSRange glyphRange, native int glyphs) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.SubstituteGlyphs(Foundation.NSRange,System.IntPtr)" />
      <MemberSignature Language="F#" Value="abstract member SubstituteGlyphs : Foundation.NSRange * nativeint -&gt; unit&#xA;override this.SubstituteGlyphs : Foundation.NSRange * nativeint -&gt; unit" Usage="nSTypesetter.SubstituteGlyphs (glyphRange, glyphs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("substituteGlyphsInRange:withGlyphs:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="glyphs" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <param name="glyphs">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContainers">
      <MemberSignature Language="C#" Value="public virtual AppKit.NSTextContainer[] TextContainers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AppKit.NSTextContainer[] TextContainers" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSTypesetter.TextContainers" />
      <MemberSignature Language="F#" Value="member this.TextContainers : AppKit.NSTextContainer[]" Usage="AppKit.NSTypesetter.TextContainers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("textContainers")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSTextContainer[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypesetterBehavior">
      <MemberSignature Language="C#" Value="public virtual AppKit.NSTypesetterBehavior TypesetterBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype AppKit.NSTypesetterBehavior TypesetterBehavior" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSTypesetter.TypesetterBehavior" />
      <MemberSignature Language="F#" Value="member this.TypesetterBehavior : AppKit.NSTypesetterBehavior with get, set" Usage="AppKit.NSTypesetter.TypesetterBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("typesetterBehavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTypesetterBehavior:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AppKit.NSTypesetterBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsesFontLeading">
      <MemberSignature Language="C#" Value="public virtual bool UsesFontLeading { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UsesFontLeading" />
      <MemberSignature Language="DocId" Value="P:AppKit.NSTypesetter.UsesFontLeading" />
      <MemberSignature Language="F#" Value="member this.UsesFontLeading : bool with get, set" Usage="AppKit.NSTypesetter.UsesFontLeading" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("usesFontLeading")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setUsesFontLeading:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillSetLineFragment">
      <MemberSignature Language="C#" Value="public virtual void WillSetLineFragment (ref CoreGraphics.CGRect lineRect, Foundation.NSRange glyphRange, ref CoreGraphics.CGRect usedRect, ref nfloat baselineOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillSetLineFragment(valuetype CoreGraphics.CGRect&amp; lineRect, valuetype Foundation.NSRange glyphRange, valuetype CoreGraphics.CGRect&amp; usedRect, valuetype System.nfloat&amp; baselineOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.NSTypesetter.WillSetLineFragment(CoreGraphics.CGRect@,Foundation.NSRange,CoreGraphics.CGRect@,System.nfloat@)" />
      <MemberSignature Language="F#" Value="abstract member WillSetLineFragment :  * Foundation.NSRange *  *  -&gt; unit&#xA;override this.WillSetLineFragment :  * Foundation.NSRange *  *  -&gt; unit" Usage="nSTypesetter.WillSetLineFragment (lineRect, glyphRange, usedRect, baselineOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("willSetLineFragmentRect:forGlyphRange:usedRect:baselineOffset:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineRect" Type="CoreGraphics.CGRect" RefType="ref" />
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="usedRect" Type="CoreGraphics.CGRect" RefType="ref" />
        <Parameter Name="baselineOffset" Type="System.nfloat" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lineRect">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <param name="usedRect">To be added.</param>
        <param name="baselineOffset">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
